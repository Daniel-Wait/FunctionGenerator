
function_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000491c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004aa8  08004aa8  00014aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce0  08004ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08004cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08004cf4  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b60c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a1f  00000000  00000000  0002b648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002d068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002db98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c031  00000000  00000000  0002e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087d6  00000000  00000000  0004a621  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4724  00000000  00000000  00052df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f751b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  000f7598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a8c 	.word	0x08004a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a8c 	.word	0x08004a8c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	0000      	movs	r0, r0
	...

08000ba8 <generateFSK2D>:
		sine_val[i] = ( (sin(2*PI*5*i/Ns) + 1.1) )*(4096/8);
	}
}

void generateFSK2D(uint32_t* out_fsk_modu, int* in_bit_sequence, int num_bits, float fs, int samples_per_bit, float f0, float f1)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	61f8      	str	r0, [r7, #28]
 8000bb0:	61b9      	str	r1, [r7, #24]
 8000bb2:	617a      	str	r2, [r7, #20]
 8000bb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bbe:	ed87 1a01 	vstr	s2, [r7, #4]
  float f_mux;

  float fadd = 50*DSAMP;
 8000bc2:	4ba9      	ldr	r3, [pc, #676]	; (8000e68 <generateFSK2D+0x2c0>)
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  const int fhss_num = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  float fhss_0[ 2 ] = {0};
 8000bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
  float fhss_1[ 2 ] = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]

  int tally_0 = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	657b      	str	r3, [r7, #84]	; 0x54
  int tally_1 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	653b      	str	r3, [r7, #80]	; 0x50

  for(int m = fhss_num; m >= 0; m--)
 8000be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bea:	e02c      	b.n	8000c46 <generateFSK2D+0x9e>
  {
	  fhss_0[m] = f0 - m*fadd;
 8000bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bfe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c0e:	4413      	add	r3, r2
 8000c10:	3b30      	subs	r3, #48	; 0x30
 8000c12:	edc3 7a00 	vstr	s15, [r3]
	  fhss_1[m] = f1 + m*fadd;
 8000c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c20:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c38:	4413      	add	r3, r2
 8000c3a:	3b38      	subs	r3, #56	; 0x38
 8000c3c:	edc3 7a00 	vstr	s15, [r3]
  for(int m = fhss_num; m >= 0; m--)
 8000c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c42:	3b01      	subs	r3, #1
 8000c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dacf      	bge.n	8000bec <generateFSK2D+0x44>
  }

  for (int i = 0; i < num_bits; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c50:	e0f7      	b.n	8000e42 <generateFSK2D+0x29a>
  {
    int index = (int)(i * samples_per_bit);
 8000c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34

    if (in_bit_sequence[i] == 0)
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4413      	add	r3, r2
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d174      	bne.n	8000d54 <generateFSK2D+0x1ac>
    {
		for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c6e:	e069      	b.n	8000d44 <generateFSK2D+0x19c>
		{
		  f_mux = fhss_0[ tally_0 % fhss_num ] - DSAMP*50*cnt/samples_per_bit;
 8000c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c74:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c7a:	fb01 f202 	mul.w	r2, r1, r2
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c86:	4413      	add	r3, r2
 8000c88:	3b30      	subs	r3, #48	; 0x30
 8000c8a:	ed93 7a00 	vldr	s14, [r3]
 8000c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c90:	22c8      	movs	r2, #200	; 0xc8
 8000c92:	fb02 f203 	mul.w	r2, r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  //f_mux = fhss_0[ 0 ] - DSAMP*50*cnt/samples_per_bit;
		  out_fsk_modu[index + cnt] =  (uint32_t)( ( 1.1 + sin( (float)(2 * PI * f_mux * cnt) / fs ) )*(4096/4) );
 8000cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cae:	f7ff fbef 	bl	8000490 <__aeabi_f2d>
 8000cb2:	a369      	add	r3, pc, #420	; (adr r3, 8000e58 <generateFSK2D+0x2b0>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fc42 	bl	8000540 <__aeabi_dmul>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	4625      	mov	r5, r4
 8000cc2:	461c      	mov	r4, r3
 8000cc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000cc6:	f7ff fbd1 	bl	800046c <__aeabi_i2d>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4620      	mov	r0, r4
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	f7ff fc35 	bl	8000540 <__aeabi_dmul>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	4621      	mov	r1, r4
 8000cde:	f7ff ff11 	bl	8000b04 <__aeabi_d2f>
 8000ce2:	ee06 0a90 	vmov	s13, r0
 8000ce6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cee:	ee17 0a10 	vmov	r0, s14
 8000cf2:	f7ff fbcd 	bl	8000490 <__aeabi_f2d>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	ec44 3b10 	vmov	d0, r3, r4
 8000cfe:	f002 feb3 	bl	8003a68 <sin>
 8000d02:	ec51 0b10 	vmov	r0, r1, d0
 8000d06:	a356      	add	r3, pc, #344	; (adr r3, 8000e60 <generateFSK2D+0x2b8>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f7ff fa62 	bl	80001d4 <__adddf3>
 8000d10:	4603      	mov	r3, r0
 8000d12:	460c      	mov	r4, r1
 8000d14:	4618      	mov	r0, r3
 8000d16:	4621      	mov	r1, r4
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <generateFSK2D+0x2c4>)
 8000d1e:	f7ff fc0f 	bl	8000540 <__aeabi_dmul>
 8000d22:	4603      	mov	r3, r0
 8000d24:	460c      	mov	r4, r1
 8000d26:	4618      	mov	r0, r3
 8000d28:	4621      	mov	r1, r4
 8000d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	18d4      	adds	r4, r2, r3
 8000d36:	f7ff fec5 	bl	8000ac4 <__aeabi_d2uiz>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6023      	str	r3, [r4, #0]
		for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d40:	3301      	adds	r3, #1
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
 8000d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	db91      	blt.n	8000c70 <generateFSK2D+0xc8>
		}
		tally_0++;
 8000d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d4e:	3301      	adds	r3, #1
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
 8000d52:	e073      	b.n	8000e3c <generateFSK2D+0x294>
    }
    else
    {
    	for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
 8000d58:	e069      	b.n	8000e2e <generateFSK2D+0x286>
    	{
    		f_mux = fhss_1[ tally_1 % fhss_num ] + DSAMP*50*cnt/samples_per_bit;
 8000d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d5e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d64:	fb01 f202 	mul.w	r2, r1, r2
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000d70:	4413      	add	r3, r2
 8000d72:	3b38      	subs	r3, #56	; 0x38
 8000d74:	ed93 7a00 	vldr	s14, [r3]
 8000d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	fb02 f203 	mul.w	r2, r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d86:	ee07 3a90 	vmov	s15, r3
 8000d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    		//f_mux = fhss_1[ 0 ] + DSAMP*50*cnt/samples_per_bit;
    		out_fsk_modu[index + cnt] =  (uint32_t)( ( 1.1 + sin( (float)(2 * PI * f_mux * cnt) / fs ) )*(4096/4) );
 8000d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d98:	f7ff fb7a 	bl	8000490 <__aeabi_f2d>
 8000d9c:	a32e      	add	r3, pc, #184	; (adr r3, 8000e58 <generateFSK2D+0x2b0>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fbcd 	bl	8000540 <__aeabi_dmul>
 8000da6:	4603      	mov	r3, r0
 8000da8:	460c      	mov	r4, r1
 8000daa:	4625      	mov	r5, r4
 8000dac:	461c      	mov	r4, r3
 8000dae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000db0:	f7ff fb5c 	bl	800046c <__aeabi_i2d>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f7ff fbc0 	bl	8000540 <__aeabi_dmul>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	f7ff fe9c 	bl	8000b04 <__aeabi_d2f>
 8000dcc:	ee06 0a90 	vmov	s13, r0
 8000dd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dd8:	ee17 0a10 	vmov	r0, s14
 8000ddc:	f7ff fb58 	bl	8000490 <__aeabi_f2d>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	ec44 3b10 	vmov	d0, r3, r4
 8000de8:	f002 fe3e 	bl	8003a68 <sin>
 8000dec:	ec51 0b10 	vmov	r0, r1, d0
 8000df0:	a31b      	add	r3, pc, #108	; (adr r3, 8000e60 <generateFSK2D+0x2b8>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff f9ed 	bl	80001d4 <__adddf3>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460c      	mov	r4, r1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	4621      	mov	r1, r4
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <generateFSK2D+0x2c4>)
 8000e08:	f7ff fb9a 	bl	8000540 <__aeabi_dmul>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	460c      	mov	r4, r1
 8000e10:	4618      	mov	r0, r3
 8000e12:	4621      	mov	r1, r4
 8000e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	18d4      	adds	r4, r2, r3
 8000e20:	f7ff fe50 	bl	8000ac4 <__aeabi_d2uiz>
 8000e24:	4603      	mov	r3, r0
 8000e26:	6023      	str	r3, [r4, #0]
    	for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	db91      	blt.n	8000d5a <generateFSK2D+0x1b2>
    	}
    	tally_1++;
 8000e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e38:	3301      	adds	r3, #1
 8000e3a:	653b      	str	r3, [r7, #80]	; 0x50
  for (int i = 0; i < num_bits; i++)
 8000e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e3e:	3301      	adds	r3, #1
 8000e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	f6ff af03 	blt.w	8000c52 <generateFSK2D+0xaa>
    }
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3758      	adds	r7, #88	; 0x58
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bdb0      	pop	{r4, r5, r7, pc}
 8000e54:	f3af 8000 	nop.w
 8000e58:	fc8b007a 	.word	0xfc8b007a
 8000e5c:	401921fa 	.word	0x401921fa
 8000e60:	9999999a 	.word	0x9999999a
 8000e64:	3ff19999 	.word	0x3ff19999
 8000e68:	43480000 	.word	0x43480000
 8000e6c:	40900000 	.word	0x40900000

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	f5ad 5d26 	sub.w	sp, sp, #10624	; 0x2980
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fa7b 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f843 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f000 f919 	bl	80010b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e86:	f000 f8f9 	bl	800107c <MX_DMA_Init>
  MX_DAC1_Init();
 8000e8a:	f000 f87f 	bl	8000f8c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000e8e:	f000 f8a7 	bl	8000fe0 <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  //int bit_seq[BIT_NUM] = {1,0};
  //int bit_seq[BIT_NUM] = {1,0,1,0,1,0};
  //int bit_seq[BIT_NUM] = {1,0,1,0,1,0,1,0,1,0,1,0};
  //int bit_seq[BIT_NUM] = {1,1,0,1,0,0,1,1,1,1,0,0};
  int bit_seq[BIT_NUM] = {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0};
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <main+0x80>)
 8000e94:	f507 5425 	add.w	r4, r7, #10560	; 0x2940
 8000e98:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8000e9c:	461d      	mov	r5, r3
 8000e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t mf_msg[BIT_NUM*BIT_LEN];

  generateFSK2D(mf_msg, bit_seq, BIT_NUM, FS, BIT_LEN, 200*DSAMP, 400*DSAMP);
 8000eae:	f507 5125 	add.w	r1, r7, #10560	; 0x2940
 8000eb2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000eb6:	f107 0020 	add.w	r0, r7, #32
 8000eba:	3820      	subs	r0, #32
 8000ebc:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8000ef4 <main+0x84>
 8000ec0:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8000ef8 <main+0x88>
 8000ec4:	23dd      	movs	r3, #221	; 0xdd
 8000ec6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000efc <main+0x8c>
 8000eca:	220c      	movs	r2, #12
 8000ecc:	f7ff fe6c 	bl	8000ba8 <generateFSK2D>

  //get_sine_val();

  HAL_TIM_Base_Start(&htim2);
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <main+0x90>)
 8000ed2:	f002 f9cb 	bl	800326c <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1 , DAC_CHANNEL_1, mf_msg, BIT_NUM*BIT_LEN, DAC_ALIGN_12B_R);
 8000ed6:	f107 0220 	add.w	r2, r7, #32
 8000eda:	3a20      	subs	r2, #32
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	f640 235c 	movw	r3, #2652	; 0xa5c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <main+0x94>)
 8000ee8:	f000 fbfc 	bl	80016e4 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac1 , DAC_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R);

  while (1)
 8000eec:	e7fe      	b.n	8000eec <main+0x7c>
 8000eee:	bf00      	nop
 8000ef0:	08004aa8 	.word	0x08004aa8
 8000ef4:	44c80000 	.word	0x44c80000
 8000ef8:	44480000 	.word	0x44480000
 8000efc:	472c4400 	.word	0x472c4400
 8000f00:	20000210 	.word	0x20000210
 8000f04:	20000028 	.word	0x20000028

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	2228      	movs	r2, #40	; 0x28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fd9e 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f32:	2310      	movs	r3, #16
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f3e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 f875 	bl	8002038 <HAL_RCC_OscConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f54:	f000 f8c8 	bl	80010e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2102      	movs	r1, #2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 ff68 	bl	8002e48 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f7e:	f000 f8b3 	bl	80010e8 <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3740      	adds	r7, #64	; 0x40
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_DAC1_Init+0x4c>)
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MX_DAC1_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_DAC1_Init+0x4c>)
 8000fa4:	f000 fb5d 	bl	8001662 <HAL_DAC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000fae:	f000 f89b 	bl	80010e8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fb2:	2324      	movs	r3, #36	; 0x24
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_DAC1_Init+0x4c>)
 8000fc2:	f000 fc3d 	bl	8001840 <HAL_DAC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000fcc:	f000 f88c 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000028 	.word	0x20000028
 8000fdc:	40007400 	.word	0x40007400

08000fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_TIM2_Init+0x98>)
 8001000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_TIM2_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM2_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1451*DSAMP; //1451*DSAMP
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_TIM2_Init+0x98>)
 8001014:	f241 62ac 	movw	r2, #5804	; 0x16ac
 8001018:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_TIM2_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM2_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_TIM2_Init+0x98>)
 8001028:	f002 f8f4 	bl	8003214 <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001032:	f000 f859 	bl	80010e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_TIM2_Init+0x98>)
 8001044:	f002 fa5b 	bl	80034fe <HAL_TIM_ConfigClockSource>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800104e:	f000 f84b 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001052:	2320      	movs	r3, #32
 8001054:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_TIM2_Init+0x98>)
 8001060:	f002 fc4a 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800106a:	f000 f83d 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000210 	.word	0x20000210

0800107c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_DMA_Init+0x38>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <MX_DMA_Init+0x38>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_DMA_Init+0x38>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	200d      	movs	r0, #13
 80010a0:	f000 faa9 	bl	80015f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010a4:	200d      	movs	r0, #13
 80010a6:	f000 fac2 	bl	800162e <HAL_NVIC_EnableIRQ>

}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_GPIO_Init+0x2c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <MX_GPIO_Init+0x2c>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_GPIO_Init+0x2c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x44>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x44>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112e:	2007      	movs	r0, #7
 8001130:	f000 fa56 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_DAC_MspInit+0xd4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d153      	bne.n	800120a <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_DAC_MspInit+0xd8>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_DAC_MspInit+0xd8>)
 8001168:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_DAC_MspInit+0xd8>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_DAC_MspInit+0xd8>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_DAC_MspInit+0xd8>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_DAC_MspInit+0xd8>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001192:	2310      	movs	r3, #16
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f000 fdd4 	bl	8001d54 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_DAC_MspInit+0xe0>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011b4:	2210      	movs	r2, #16
 80011b6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011d6:	2220      	movs	r2, #32
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011dc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <HAL_DAC_MspInit+0xdc>)
 80011e4:	f000 fc1e 	bl	8001a24 <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80011ee:	f7ff ff7b 	bl	80010e8 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_DAC_MspInit+0xe4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_DAC_MspInit+0xe4>)
 80011f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011fc:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_DAC_MspInit+0xdc>)
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_DAC_MspInit+0xdc>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6253      	str	r3, [r2, #36]	; 0x24
    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40007400 	.word	0x40007400
 8001218:	40021000 	.word	0x40021000
 800121c:	200001cc 	.word	0x200001cc
 8001220:	40020030 	.word	0x40020030
 8001224:	40010000 	.word	0x40010000

08001228 <HAL_TIM_Base_MspInit>:
  }

}

/**
* @brief TIM_Base MSP Initialization
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
* This function configures the hardware resources used in this example
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3a>
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 f9cd 	bl	80015f6 <HAL_NVIC_SetPriority>

 800125c:	201c      	movs	r0, #28
 800125e:	f000 f9e6 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f89c 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <DMA1_Channel3_IRQHandler+0x10>)
 80012d2:	f000 fc4d 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001cc 	.word	0x200001cc

080012e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM2_IRQHandler+0x10>)
 80012e6:	f001 ffeb 	bl	80032c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000210 	.word	0x20000210

080012f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SystemInit+0x28>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <SystemInit+0x28>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <SystemInit+0x28>)
 800130a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130e:	609a      	str	r2, [r3, #8]
#endif
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001324:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001326:	e003      	b.n	8001330 <LoopCopyDataInit>

08001328 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800132a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800132c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800132e:	3104      	adds	r1, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001334:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001336:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001338:	d3f6      	bcc.n	8001328 <CopyDataInit>
	ldr	r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopForever+0x12>)
	b	LoopFillZerobss
 800133c:	e002      	b.n	8001344 <LoopFillZerobss>

0800133e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800133e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001340:	f842 3b04 	str.w	r3, [r2], #4

08001344 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <LoopForever+0x16>)
	cmp	r2, r3
 8001346:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001348:	d3f9      	bcc.n	800133e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800134a:	f7ff ffd3 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f002 fb5f 	bl	8003a10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001352:	f7ff fd8d 	bl	8000e70 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001358:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800135c:	08004ce8 	.word	0x08004ce8
	ldr	r0, =_sdata
 8001360:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001364:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001368:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800136c:	20000254 	.word	0x20000254

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>
	...

08001374 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_Init+0x28>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_Init+0x28>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f92b 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff feb2 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40022000 	.word	0x40022000

080013a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f943 	bl	800164a <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f90b 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
 8001424:	20000250 	.word	0x20000250

08001428 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;  
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000250 	.word	0x20000250

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff3e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff31 	bl	80014a4 <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa2 	bl	800159c <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e014      	b.n	800169e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fd5b 	bl	8001140 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_DAC_Start_DMA+0x1e>
 80016fe:	2302      	movs	r3, #2
 8001700:	e08e      	b.n	8001820 <HAL_DAC_Start_DMA+0x13c>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12a      	bne.n	800176a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a43      	ldr	r2, [pc, #268]	; (8001828 <HAL_DAC_Start_DMA+0x144>)
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_DAC_Start_DMA+0x148>)
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a41      	ldr	r2, [pc, #260]	; (8001830 <HAL_DAC_Start_DMA+0x14c>)
 800172a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800173a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d009      	beq.n	8001756 <HAL_DAC_Start_DMA+0x72>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d00c      	beq.n	8001760 <HAL_DAC_Start_DMA+0x7c>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d000      	beq.n	800174c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800174a:	e039      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3308      	adds	r3, #8
 8001752:	617b      	str	r3, [r7, #20]
        break;
 8001754:	e034      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	330c      	adds	r3, #12
 800175c:	617b      	str	r3, [r7, #20]
        break;
 800175e:	e02f      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3310      	adds	r3, #16
 8001766:	617b      	str	r3, [r7, #20]
        break;
 8001768:	e02a      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	4a31      	ldr	r2, [pc, #196]	; (8001834 <HAL_DAC_Start_DMA+0x150>)
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a30      	ldr	r2, [pc, #192]	; (8001838 <HAL_DAC_Start_DMA+0x154>)
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4a2f      	ldr	r2, [pc, #188]	; (800183c <HAL_DAC_Start_DMA+0x158>)
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001790:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d009      	beq.n	80017ac <HAL_DAC_Start_DMA+0xc8>
 8001798:	2b08      	cmp	r3, #8
 800179a:	d00c      	beq.n	80017b6 <HAL_DAC_Start_DMA+0xd2>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d000      	beq.n	80017a2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80017a0:	e00e      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3314      	adds	r3, #20
 80017a8:	617b      	str	r3, [r7, #20]
        break;
 80017aa:	e009      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3318      	adds	r3, #24
 80017b2:	617b      	str	r3, [r7, #20]
        break;
 80017b4:	e004      	b.n	80017c0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	331c      	adds	r3, #28
 80017bc:	617b      	str	r3, [r7, #20]
        break;
 80017be:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6898      	ldr	r0, [r3, #8]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	f000 f967 	bl	8001ab2 <HAL_DMA_Start_IT>
 80017e4:	e00e      	b.n	8001804 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68d8      	ldr	r0, [r3, #12]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	f000 f957 	bl	8001ab2 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	0800194d 	.word	0x0800194d
 800182c:	0800196f 	.word	0x0800196f
 8001830:	0800198b 	.word	0x0800198b
 8001834:	080019b9 	.word	0x080019b9
 8001838:	080019db 	.word	0x080019db
 800183c:	080019f7 	.word	0x080019f7

08001840 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_DAC_ConfigChannel+0x20>
 800185c:	2302      	movs	r3, #2
 800185e:	e04e      	b.n	80018fe <HAL_DAC_ConfigChannel+0xbe>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2202      	movs	r2, #2
 800186a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a24      	ldr	r2, [pc, #144]	; (800190c <HAL_DAC_ConfigChannel+0xcc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d112      	bne.n	80018a4 <HAL_DAC_ConfigChannel+0x64>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10f      	bne.n	80018a4 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001884:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4013      	ands	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e00e      	b.n	80018c2 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80018a4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4013      	ands	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	22c0      	movs	r2, #192	; 0xc0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40007400 	.word	0x40007400

08001910 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fea3 	bl	80016a6 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	711a      	strb	r2, [r3, #4]
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fe9c 	bl	80016ba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fe92 	bl	80016ce <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	711a      	strb	r2, [r3, #4]
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff ffa2 	bl	8001910 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	711a      	strb	r2, [r3, #4]
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff ff9b 	bl	8001924 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f043 0204 	orr.w	r2, r3, #4
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff ff91 	bl	8001938 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	711a      	strb	r2, [r3, #4]
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e037      	b.n	8001aaa <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a54:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f941 	bl	8001d14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}  
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_Start_IT+0x20>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e04a      	b.n	8001b68 <HAL_DMA_Start_IT+0xb6>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d13a      	bne.n	8001b5a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f8d4 	bl	8001cb6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 020e 	orr.w	r2, r2, #14
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e00f      	b.n	8001b48 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 020a 	orr.w	r2, r2, #10
 8001b36:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e005      	b.n	8001b66 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
 8001b64:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d024      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x72>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01f      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	2104      	movs	r1, #4
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d06a      	beq.n	8001cae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001be0:	e065      	b.n	8001cae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2202      	movs	r2, #2
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02c      	beq.n	8001c4c <HAL_DMA_IRQHandler+0xdc>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d027      	beq.n	8001c4c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 020a 	bic.w	r2, r2, #10
 8001c18:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d035      	beq.n	8001cae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c4a:	e030      	b.n	8001cae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	2208      	movs	r2, #8
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d028      	beq.n	8001cae <HAL_DMA_IRQHandler+0x13e>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 020e 	bic.w	r2, r2, #14
 8001c74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
    }
  }
}  
 8001cac:	e7ff      	b.n	8001cae <HAL_DMA_IRQHandler+0x13e>
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d108      	bne.n	8001cf6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cf4:	e007      	b.n	8001d06 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	60da      	str	r2, [r3, #12]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <DMA_CalcBaseAndBitshift+0x34>)
 8001d24:	4413      	add	r3, r2
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <DMA_CalcBaseAndBitshift+0x38>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	009a      	lsls	r2, r3, #2
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d38:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	bffdfff8 	.word	0xbffdfff8
 8001d4c:	cccccccd 	.word	0xcccccccd
 8001d50:	40020000 	.word	0x40020000

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d62:	e14e      	b.n	8002002 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8140 	beq.w	8001ffc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d00b      	beq.n	8001d9c <HAL_GPIO_Init+0x48>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d90:	2b11      	cmp	r3, #17
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 0201 	and.w	r2, r3, #1
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0xea>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d123      	bne.n	8001e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	6939      	ldr	r1, [r7, #16]
 8001e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0203 	and.w	r2, r3, #3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 809a 	beq.w	8001ffc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec8:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HAL_GPIO_Init+0x2cc>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_GPIO_Init+0x2cc>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b52      	ldr	r3, [pc, #328]	; (8002020 <HAL_GPIO_Init+0x2cc>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f0a:	d013      	beq.n	8001f34 <HAL_GPIO_Init+0x1e0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a46      	ldr	r2, [pc, #280]	; (8002028 <HAL_GPIO_Init+0x2d4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00d      	beq.n	8001f30 <HAL_GPIO_Init+0x1dc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a45      	ldr	r2, [pc, #276]	; (800202c <HAL_GPIO_Init+0x2d8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_Init+0x1d8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a44      	ldr	r2, [pc, #272]	; (8002030 <HAL_GPIO_Init+0x2dc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_Init+0x1d4>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x1e2>
 8001f28:	2305      	movs	r3, #5
 8001f2a:	e004      	b.n	8001f36 <HAL_GPIO_Init+0x1e2>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x1e2>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_GPIO_Init+0x1e2>
 8001f34:	2300      	movs	r3, #0
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	f002 0203 	and.w	r2, r2, #3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f46:	4937      	ldr	r1, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f78:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fa2:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x2e0>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f aea9 	bne.w	8001d64 <HAL_GPIO_Init+0x10>
  }
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	48000400 	.word	0x48000400
 800202c:	48000800 	.word	0x48000800
 8002030:	48000c00 	.word	0x48000c00
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800203e:	af00      	add	r7, sp, #0
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f000 bef4 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 816a 	beq.w	8002336 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002062:	4bb3      	ldr	r3, [pc, #716]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d00c      	beq.n	8002088 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800206e:	4bb0      	ldr	r3, [pc, #704]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b08      	cmp	r3, #8
 8002078:	d159      	bne.n	800212e <HAL_RCC_OscConfig+0xf6>
 800207a:	4bad      	ldr	r3, [pc, #692]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d152      	bne.n	800212e <HAL_RCC_OscConfig+0xf6>
 8002088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800209c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0x82>
 80020b4:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0xae>
 80020ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020e2:	4b93      	ldr	r3, [pc, #588]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020fe:	fab2 f282 	clz	r2, r2
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f042 0220 	orr.w	r2, r2, #32
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f002 021f 	and.w	r2, r2, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 810c 	beq.w	8002334 <HAL_RCC_OscConfig+0x2fc>
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8106 	bne.w	8002334 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f000 be86 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x110>
 800213a:	4b7d      	ldr	r3, [pc, #500]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7c      	ldr	r2, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e030      	b.n	80021aa <HAL_RCC_OscConfig+0x172>
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x134>
 8002152:	4b77      	ldr	r3, [pc, #476]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a76      	ldr	r2, [pc, #472]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b74      	ldr	r3, [pc, #464]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a73      	ldr	r2, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01e      	b.n	80021aa <HAL_RCC_OscConfig+0x172>
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x15a>
 8002178:	4b6d      	ldr	r3, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6c      	ldr	r2, [pc, #432]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 800217e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x172>
 8002192:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a66      	ldr	r2, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a63      	ldr	r2, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021aa:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	495d      	ldr	r1, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d059      	beq.n	800227c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff f92e 	bl	8001428 <HAL_GetTick>
 80021cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d2:	f7ff f929 	bl	8001428 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d902      	bls.n	80021e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f000 be29 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_RCC_OscConfig+0x1e2>
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x20e>
 800221a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800222e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002232:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002236:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800224a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800224e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002252:	fa92 f2a2 	rbit	r2, r2
 8002256:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800225a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800225e:	fab2 f282 	clz	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f042 0220 	orr.w	r2, r2, #32
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f002 021f 	and.w	r2, r2, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f202 	lsl.w	r2, r1, r2
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ab      	beq.n	80021d2 <HAL_RCC_OscConfig+0x19a>
 800227a:	e05c      	b.n	8002336 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f8d4 	bl	8001428 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002286:	f7ff f8cf 	bl	8001428 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d902      	bls.n	800229c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	f000 bdcf 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>
 800229c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_RCC_OscConfig+0x296>
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x2c2>
 80022ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCC_OscConfig+0x2f8>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002302:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002306:	fa92 f2a2 	rbit	r2, r2
 800230a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800230e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002312:	fab2 f282 	clz	r2, r2
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f042 0220 	orr.w	r2, r2, #32
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f002 021f 	and.w	r2, r2, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ab      	bne.n	8002286 <HAL_RCC_OscConfig+0x24e>
 800232e:	e002      	b.n	8002336 <HAL_RCC_OscConfig+0x2fe>
 8002330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 816f 	beq.w	8002624 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002346:	4bd0      	ldr	r3, [pc, #832]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002352:	4bcd      	ldr	r3, [pc, #820]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d16c      	bne.n	8002438 <HAL_RCC_OscConfig+0x400>
 800235e:	4bca      	ldr	r3, [pc, #808]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d166      	bne.n	8002438 <HAL_RCC_OscConfig+0x400>
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800237c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_RCC_OscConfig+0x362>
 8002394:	4bbc      	ldr	r3, [pc, #752]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e013      	b.n	80023c2 <HAL_RCC_OscConfig+0x38a>
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023be:	4bb2      	ldr	r3, [pc, #712]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2202      	movs	r2, #2
 80023c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023d4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023d8:	fab2 f282 	clz	r2, r2
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f042 0220 	orr.w	r2, r2, #32
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f002 021f 	and.w	r2, r2, #31
 80023e8:	2101      	movs	r1, #1
 80023ea:	fa01 f202 	lsl.w	r2, r1, r2
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_RCC_OscConfig+0x3cc>
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f000 bd1b 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4ba0      	ldr	r3, [pc, #640]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	21f8      	movs	r1, #248	; 0xf8
 8002414:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800241c:	fa91 f1a1 	rbit	r1, r1
 8002420:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002424:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002428:	fab1 f181 	clz	r1, r1
 800242c:	b2c9      	uxtb	r1, r1
 800242e:	408b      	lsls	r3, r1
 8002430:	4995      	ldr	r1, [pc, #596]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	e0f5      	b.n	8002624 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8085 	beq.w	800254e <HAL_RCC_OscConfig+0x516>
 8002444:	2301      	movs	r3, #1
 8002446:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002456:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe ffda 	bl	8001428 <HAL_GetTick>
 8002474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe ffd5 	bl	8001428 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d902      	bls.n	8002490 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	f000 bcd5 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x488>
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e013      	b.n	80024e8 <HAL_RCC_OscConfig+0x4b0>
 80024c0:	2302      	movs	r3, #2
 80024c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2202      	movs	r2, #2
 80024ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80024ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80024fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0af      	beq.n	800247a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	21f8      	movs	r1, #248	; 0xf8
 800252a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002532:	fa91 f1a1 	rbit	r1, r1
 8002536:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800253a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800253e:	fab1 f181 	clz	r1, r1
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	408b      	lsls	r3, r1
 8002546:	4950      	ldr	r1, [pc, #320]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e06a      	b.n	8002624 <HAL_RCC_OscConfig+0x5ec>
 800254e:	2301      	movs	r3, #1
 8002550:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002560:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	461a      	mov	r2, r3
 8002576:	2300      	movs	r3, #0
 8002578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe ff55 	bl	8001428 <HAL_GetTick>
 800257e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe ff50 	bl	8001428 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d902      	bls.n	800259a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	f000 bc50 	b.w	8002e3a <HAL_RCC_OscConfig+0xe02>
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_OscConfig+0x592>
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e013      	b.n	80025f2 <HAL_RCC_OscConfig+0x5ba>
 80025ca:	2302      	movs	r3, #2
 80025cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_RCC_OscConfig+0x650>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2202      	movs	r2, #2
 80025f4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80025f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025fc:	fa92 f2a2 	rbit	r2, r2
 8002600:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002604:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f002 021f 	and.w	r2, r2, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1af      	bne.n	8002584 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80da 	beq.w	80027e8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d069      	beq.n	8002712 <HAL_RCC_OscConfig+0x6da>
 800263e:	2301      	movs	r3, #1
 8002640:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x654>)
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7fe fede 	bl	8001428 <HAL_GetTick>
 800266c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002670:	e00e      	b.n	8002690 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002672:	f7fe fed9 	bl	8001428 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d906      	bls.n	8002690 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e3d9      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	10908120 	.word	0x10908120
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026a6:	2202      	movs	r2, #2
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fa93 f2a3 	rbit	r2, r3
 80026b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4ba5      	ldr	r3, [pc, #660]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80026d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80026da:	2102      	movs	r1, #2
 80026dc:	6019      	str	r1, [r3, #0]
 80026de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f1a3 	rbit	r1, r3
 80026e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026ec:	6019      	str	r1, [r3, #0]
  return result;
 80026ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0b0      	beq.n	8002672 <HAL_RCC_OscConfig+0x63a>
 8002710:	e06a      	b.n	80027e8 <HAL_RCC_OscConfig+0x7b0>
 8002712:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002728:	601a      	str	r2, [r3, #0]
  return result;
 800272a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800272e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	4b8c      	ldr	r3, [pc, #560]	; (800296c <HAL_RCC_OscConfig+0x934>)
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	2300      	movs	r3, #0
 8002742:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7fe fe70 	bl	8001428 <HAL_GetTick>
 8002748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e009      	b.n	8002762 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fe6b 	bl	8001428 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e36b      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002762:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002766:	2202      	movs	r2, #2
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002796:	2202      	movs	r2, #2
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80027ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027b2:	2102      	movs	r1, #2
 80027b4:	6019      	str	r1, [r3, #0]
 80027b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f1a3 	rbit	r1, r3
 80027c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027c4:	6019      	str	r1, [r3, #0]
  return result;
 80027c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1b2      	bne.n	800274e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8158 	beq.w	8002aa8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fe:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d112      	bne.n	8002830 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b57      	ldr	r3, [pc, #348]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a56      	ldr	r2, [pc, #344]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b54      	ldr	r3, [pc, #336]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b4f      	ldr	r3, [pc, #316]	; (8002970 <HAL_RCC_OscConfig+0x938>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11a      	bne.n	8002872 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283c:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <HAL_RCC_OscConfig+0x938>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a4b      	ldr	r2, [pc, #300]	; (8002970 <HAL_RCC_OscConfig+0x938>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002848:	f7fe fdee 	bl	8001428 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe fde9 	bl	8001428 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e2e9      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_RCC_OscConfig+0x938>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ef      	beq.n	8002852 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x852>
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a39      	ldr	r2, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	e02f      	b.n	80028ea <HAL_RCC_OscConfig+0x8b2>
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x876>
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a33      	ldr	r2, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028a6:	f023 0304 	bic.w	r3, r3, #4
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e01d      	b.n	80028ea <HAL_RCC_OscConfig+0x8b2>
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x89a>
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6213      	str	r3, [r2, #32]
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e00b      	b.n	80028ea <HAL_RCC_OscConfig+0x8b2>
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a21      	ldr	r2, [pc, #132]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d06b      	beq.n	80029cc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fd98 	bl	8001428 <HAL_GetTick>
 80028f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fd93 	bl	8001428 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e291      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002916:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800291a:	2202      	movs	r2, #2
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002932:	2202      	movs	r2, #2
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800294a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f043 0302 	orr.w	r3, r3, #2
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d109      	bne.n	8002974 <HAL_RCC_OscConfig+0x93c>
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <HAL_RCC_OscConfig+0x930>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x958>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	10908120 	.word	0x10908120
 8002970:	40007000 	.word	0x40007000
 8002974:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002978:	2202      	movs	r2, #2
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	4bbb      	ldr	r3, [pc, #748]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002994:	2102      	movs	r1, #2
 8002996:	6011      	str	r1, [r2, #0]
 8002998:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	fa92 f1a2 	rbit	r1, r2
 80029a2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029a6:	6011      	str	r1, [r2, #0]
  return result;
 80029a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	fab2 f282 	clz	r2, r2
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f002 021f 	and.w	r2, r2, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d099      	beq.n	80028fe <HAL_RCC_OscConfig+0x8c6>
 80029ca:	e063      	b.n	8002a94 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fd2c 	bl	8001428 <HAL_GetTick>
 80029d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fd27 	bl	8001428 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e225      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 80029ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a1c:	601a      	str	r2, [r3, #0]
  return result;
 8002a1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_OscConfig+0xa06>
 8002a38:	4b90      	ldr	r3, [pc, #576]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	e00d      	b.n	8002a5a <HAL_RCC_OscConfig+0xa22>
 8002a3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a42:	2202      	movs	r2, #2
 8002a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	fa93 f2a3 	rbit	r2, r3
 8002a50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	4b89      	ldr	r3, [pc, #548]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a5e:	2102      	movs	r1, #2
 8002a60:	6011      	str	r1, [r2, #0]
 8002a62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	fa92 f1a2 	rbit	r1, r2
 8002a6c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a70:	6011      	str	r1, [r2, #0]
  return result;
 8002a72:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1a0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4a76      	ldr	r2, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 81c2 	beq.w	8002e38 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab4:	4b71      	ldr	r3, [pc, #452]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	f000 819c 	beq.w	8002dfa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	f040 8114 	bne.w	8002cf6 <HAL_RCC_OscConfig+0xcbe>
 8002ace:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ae6:	601a      	str	r2, [r3, #0]
  return result;
 8002ae8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002aec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	461a      	mov	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fc90 	bl	8001428 <HAL_GetTick>
 8002b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0c:	e009      	b.n	8002b22 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe fc8b 	bl	8001428 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e18b      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002b22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b3a:	601a      	str	r2, [r3, #0]
  return result;
 8002b3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_OscConfig+0xb24>
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e01b      	b.n	8002b94 <HAL_RCC_OscConfig+0xb5c>
 8002b5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	fa93 f2a3 	rbit	r2, r3
 8002b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fa92 f1a2 	rbit	r1, r2
 8002ba8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bac:	6011      	str	r1, [r2, #0]
  return result;
 8002bae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d19e      	bne.n	8002b0e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	4925      	ldr	r1, [pc, #148]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
 8002bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fa93 f2a3 	rbit	r2, r3
 8002c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c04:	601a      	str	r2, [r3, #0]
  return result;
 8002c06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c0a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fc01 	bl	8001428 <HAL_GetTick>
 8002c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2a:	e009      	b.n	8002c40 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fbfc 	bl	8001428 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0fc      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002c40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f2a3 	rbit	r2, r3
 8002c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c58:	601a      	str	r2, [r3, #0]
  return result;
 8002c5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_OscConfig+0xc48>
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <HAL_RCC_OscConfig+0xc44>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	e01e      	b.n	8002cb8 <HAL_RCC_OscConfig+0xc80>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_OscConfig+0xe0c>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	fa92 f1a2 	rbit	r1, r2
 8002ccc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002cd0:	6011      	str	r1, [r2, #0]
  return result;
 8002cd2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f002 021f 	and.w	r2, r2, #31
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d09b      	beq.n	8002c2c <HAL_RCC_OscConfig+0xbf4>
 8002cf4:	e0a0      	b.n	8002e38 <HAL_RCC_OscConfig+0xe00>
 8002cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	fa93 f2a3 	rbit	r2, r3
 8002d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fb7c 	bl	8001428 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e009      	b.n	8002d4a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fb77 	bl	8001428 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e077      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
 8002d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d62:	601a      	str	r2, [r3, #0]
  return result;
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_OscConfig+0xd4c>
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_RCC_OscConfig+0xe0c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0xd84>
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f107 0320 	add.w	r3, r7, #32
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	fa93 f2a3 	rbit	r2, r3
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f107 0318 	add.w	r3, r7, #24
 8002da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f107 0318 	add.w	r3, r7, #24
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_RCC_OscConfig+0xe0c>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f107 0210 	add.w	r2, r7, #16
 8002dc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	f107 0210 	add.w	r2, r7, #16
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	fa92 f1a2 	rbit	r1, r2
 8002dd0:	f107 020c 	add.w	r2, r7, #12
 8002dd4:	6011      	str	r1, [r2, #0]
  return result;
 8002dd6:	f107 020c 	add.w	r2, r7, #12
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f042 0220 	orr.w	r2, r2, #32
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f002 021f 	and.w	r2, r2, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d19e      	bne.n	8002d36 <HAL_RCC_OscConfig+0xcfe>
 8002df8:	e01e      	b.n	8002e38 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e018      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_RCC_OscConfig+0xe0c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b09e      	sub	sp, #120	; 0x78
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e162      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b90      	ldr	r3, [pc, #576]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d910      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b8d      	ldr	r3, [pc, #564]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	498b      	ldr	r1, [pc, #556]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b89      	ldr	r3, [pc, #548]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e14a      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	497f      	ldr	r1, [pc, #508]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80dc 	beq.w	8003074 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d13c      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xf6>
 8002ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_ClockConfig+0xa6>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e00f      	b.n	8002f0e <HAL_RCC_ClockConfig+0xc6>
 8002eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	667b      	str	r3, [r7, #100]	; 0x64
 8002efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f00:	663b      	str	r3, [r7, #96]	; 0x60
 8002f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f12:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f042 0220 	orr.w	r2, r2, #32
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f002 021f 	and.w	r2, r2, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d17b      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0f3      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d13c      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x178>
 8002f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x128>
 8002f6a:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e00f      	b.n	8002f90 <HAL_RCC_ClockConfig+0x148>
 8002f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
 8002f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8c:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f94:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f98:	fa92 f2a2 	rbit	r2, r2
 8002f9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13a      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b2      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	e00d      	b.n	8003004 <HAL_RCC_ClockConfig+0x1bc>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	61ba      	str	r2, [r7, #24]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	fa92 f2a2 	rbit	r2, r2
 800300e:	617a      	str	r2, [r7, #20]
  return result;
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e079      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	491a      	ldr	r1, [pc, #104]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003044:	f7fe f9f0 	bl	8001428 <HAL_GetTick>
 8003048:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe f9ec 	bl	8001428 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e061      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d214      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0207 	bic.w	r2, r3, #7
 800308a:	4906      	ldr	r1, [pc, #24]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e040      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	491a      	ldr	r1, [pc, #104]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030ea:	f000 f829 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030ee:	4601      	mov	r1, r0
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	22f0      	movs	r2, #240	; 0xf0
 80030fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	fa92 f2a2 	rbit	r2, r2
 8003102:	60fa      	str	r2, [r7, #12]
  return result;
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	fab2 f282 	clz	r2, r2
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	40d3      	lsrs	r3, r2
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x2ec>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	fa21 f303 	lsr.w	r3, r1, r3
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_RCC_ClockConfig+0x2f0>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_RCC_ClockConfig+0x2f4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe f93e 	bl	80013a0 <HAL_InitTick>
  
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3778      	adds	r7, #120	; 0x78
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	08004ad8 	.word	0x08004ad8
 8003138:	20000000 	.word	0x20000000
 800313c:	20000004 	.word	0x20000004

08003140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b08b      	sub	sp, #44	; 0x2c
 8003144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d002      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x30>
 800316a:	2b08      	cmp	r3, #8
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x36>
 800316e:	e03c      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003172:	623b      	str	r3, [r7, #32]
      break;
 8003174:	e03c      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800317c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003180:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	fa92 f2a2 	rbit	r2, r2
 8003188:	607a      	str	r2, [r7, #4]
  return result;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	fab2 f282 	clz	r2, r2
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	40d3      	lsrs	r3, r2
 8003194:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	220f      	movs	r2, #15
 80031a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	60fa      	str	r2, [r7, #12]
  return result;
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	fab2 f282 	clz	r2, r2
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	40d3      	lsrs	r3, r2
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_RCC_GetSysClockFreq+0xcc>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
 80031d8:	e004      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	623b      	str	r3, [r7, #32]
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ec:	623b      	str	r3, [r7, #32]
      break;
 80031ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	372c      	adds	r7, #44	; 0x2c
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	007a1200 	.word	0x007a1200
 8003208:	08004ae8 	.word	0x08004ae8
 800320c:	08004af8 	.word	0x08004af8
 8003210:	003d0900 	.word	0x003d0900

08003214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e01d      	b.n	8003262 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fff4 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f000 fa3e 	bl	80036d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_TIM_Base_Start+0x50>)
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b06      	cmp	r3, #6
 800328c:	d00b      	beq.n	80032a6 <HAL_TIM_Base_Start+0x3a>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d007      	beq.n	80032a6 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	00010007 	.word	0x00010007

080032c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0202 	mvn.w	r2, #2
 80032ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9c8 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9ba 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9cb 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d122      	bne.n	8003370 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b04      	cmp	r3, #4
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0204 	mvn.w	r2, #4
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f99e 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f990 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f9a1 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b08      	cmp	r3, #8
 800337c:	d122      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d11b      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0208 	mvn.w	r2, #8
 8003394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2204      	movs	r2, #4
 800339a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f974 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f966 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f977 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d122      	bne.n	8003418 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d11b      	bne.n	8003418 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0210 	mvn.w	r2, #16
 80033e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2208      	movs	r2, #8
 80033ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f94a 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f93c 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f94d 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10e      	bne.n	8003444 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0201 	mvn.w	r2, #1
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f916 	bl	8003670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b80      	cmp	r3, #128	; 0x80
 8003450:	d10e      	bne.n	8003470 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d107      	bne.n	8003470 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fabc 	bl	80039e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347e:	d10e      	bne.n	800349e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d107      	bne.n	800349e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 faaf 	bl	80039fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8fb 	bl	80036c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0220 	mvn.w	r2, #32
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fa6f 	bl	80039d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_TIM_ConfigClockSource+0x18>
 8003512:	2302      	movs	r3, #2
 8003514:	e0a8      	b.n	8003668 <HAL_TIM_ConfigClockSource+0x16a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003538:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003540:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d067      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x124>
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d80b      	bhi.n	800356e <HAL_TIM_ConfigClockSource+0x70>
 8003556:	2b10      	cmp	r3, #16
 8003558:	d073      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x144>
 800355a:	2b10      	cmp	r3, #16
 800355c:	d802      	bhi.n	8003564 <HAL_TIM_ConfigClockSource+0x66>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d06f      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003562:	e078      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003564:	2b20      	cmp	r3, #32
 8003566:	d06c      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x144>
 8003568:	2b30      	cmp	r3, #48	; 0x30
 800356a:	d06a      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800356c:	e073      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800356e:	2b70      	cmp	r3, #112	; 0x70
 8003570:	d00d      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x90>
 8003572:	2b70      	cmp	r3, #112	; 0x70
 8003574:	d804      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x82>
 8003576:	2b50      	cmp	r3, #80	; 0x50
 8003578:	d033      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0xe4>
 800357a:	2b60      	cmp	r3, #96	; 0x60
 800357c:	d041      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800357e:	e06a      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003584:	d066      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0x156>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	d017      	beq.n	80035bc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800358c:	e063      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f000 f98b 	bl	80038b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	609a      	str	r2, [r3, #8]
      break;
 80035ba:	e04c      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f000 f974 	bl	80038b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035de:	609a      	str	r2, [r3, #8]
      break;
 80035e0:	e039      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f000 f8e8 	bl	80037c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2150      	movs	r1, #80	; 0x50
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f941 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003600:	e029      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	461a      	mov	r2, r3
 8003610:	f000 f907 	bl	8003822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2160      	movs	r1, #96	; 0x60
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f931 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003620:	e019      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f000 f8c8 	bl	80037c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f921 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003640:	e009      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f000 f918 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003652:	e000      	b.n	8003656 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003654:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a32      	ldr	r2, [pc, #200]	; (80037b0 <TIM_Base_SetConfig+0xdc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x28>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x28>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a2f      	ldr	r2, [pc, #188]	; (80037b4 <TIM_Base_SetConfig+0xe0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <TIM_Base_SetConfig+0xdc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <TIM_Base_SetConfig+0x6a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d00f      	beq.n	800373e <TIM_Base_SetConfig+0x6a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <TIM_Base_SetConfig+0xe0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_Base_SetConfig+0x6a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <TIM_Base_SetConfig+0xe4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_Base_SetConfig+0x6a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <TIM_Base_SetConfig+0xe8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_Base_SetConfig+0x6a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <TIM_Base_SetConfig+0xec>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <TIM_Base_SetConfig+0xdc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0xc0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <TIM_Base_SetConfig+0xe4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0xc0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <TIM_Base_SetConfig+0xe8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0xc0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <TIM_Base_SetConfig+0xec>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800

080037c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0201 	bic.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 030a 	bic.w	r3, r3, #10
 8003800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003822:	b480      	push	{r7}
 8003824:	b087      	sub	sp, #28
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f023 0210 	bic.w	r2, r3, #16
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800384c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	031b      	lsls	r3, r3, #12
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800385e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	021a      	lsls	r2, r3, #8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	431a      	orrs	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	609a      	str	r2, [r3, #8]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e054      	b.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003940:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d009      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10c      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4313      	orrs	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40014000 	.word	0x40014000

080039d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4e0d      	ldr	r6, [pc, #52]	; (8003a48 <__libc_init_array+0x38>)
 8003a14:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a16:	1ba4      	subs	r4, r4, r6
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	42a5      	cmp	r5, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	4e0b      	ldr	r6, [pc, #44]	; (8003a50 <__libc_init_array+0x40>)
 8003a22:	4c0c      	ldr	r4, [pc, #48]	; (8003a54 <__libc_init_array+0x44>)
 8003a24:	f001 f832 	bl	8004a8c <_init>
 8003a28:	1ba4      	subs	r4, r4, r6
 8003a2a:	10a4      	asrs	r4, r4, #2
 8003a2c:	2500      	movs	r5, #0
 8003a2e:	42a5      	cmp	r5, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a38:	4798      	blx	r3
 8003a3a:	3501      	adds	r5, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a42:	4798      	blx	r3
 8003a44:	3501      	adds	r5, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08004ce0 	.word	0x08004ce0
 8003a4c:	08004ce0 	.word	0x08004ce0
 8003a50:	08004ce0 	.word	0x08004ce0
 8003a54:	08004ce4 	.word	0x08004ce4

08003a58 <memset>:
 8003a58:	4402      	add	r2, r0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <sin>:
 8003a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a6a:	ec51 0b10 	vmov	r0, r1, d0
 8003a6e:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <sin+0x88>)
 8003a70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a74:	4293      	cmp	r3, r2
 8003a76:	dc07      	bgt.n	8003a88 <sin+0x20>
 8003a78:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003ae8 <sin+0x80>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f000 fe37 	bl	80046f0 <__kernel_sin>
 8003a82:	ec51 0b10 	vmov	r0, r1, d0
 8003a86:	e007      	b.n	8003a98 <sin+0x30>
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <sin+0x8c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	dd09      	ble.n	8003aa2 <sin+0x3a>
 8003a8e:	ee10 2a10 	vmov	r2, s0
 8003a92:	460b      	mov	r3, r1
 8003a94:	f7fc fb9c 	bl	80001d0 <__aeabi_dsub>
 8003a98:	ec41 0b10 	vmov	d0, r0, r1
 8003a9c:	b005      	add	sp, #20
 8003a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa2:	4668      	mov	r0, sp
 8003aa4:	f000 f828 	bl	8003af8 <__ieee754_rem_pio2>
 8003aa8:	f000 0003 	and.w	r0, r0, #3
 8003aac:	2801      	cmp	r0, #1
 8003aae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ab2:	ed9d 0b00 	vldr	d0, [sp]
 8003ab6:	d004      	beq.n	8003ac2 <sin+0x5a>
 8003ab8:	2802      	cmp	r0, #2
 8003aba:	d005      	beq.n	8003ac8 <sin+0x60>
 8003abc:	b970      	cbnz	r0, 8003adc <sin+0x74>
 8003abe:	2001      	movs	r0, #1
 8003ac0:	e7dd      	b.n	8003a7e <sin+0x16>
 8003ac2:	f000 fa0d 	bl	8003ee0 <__kernel_cos>
 8003ac6:	e7dc      	b.n	8003a82 <sin+0x1a>
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f000 fe11 	bl	80046f0 <__kernel_sin>
 8003ace:	ec53 2b10 	vmov	r2, r3, d0
 8003ad2:	ee10 0a10 	vmov	r0, s0
 8003ad6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003ada:	e7dd      	b.n	8003a98 <sin+0x30>
 8003adc:	f000 fa00 	bl	8003ee0 <__kernel_cos>
 8003ae0:	e7f5      	b.n	8003ace <sin+0x66>
 8003ae2:	bf00      	nop
 8003ae4:	f3af 8000 	nop.w
	...
 8003af0:	3fe921fb 	.word	0x3fe921fb
 8003af4:	7fefffff 	.word	0x7fefffff

08003af8 <__ieee754_rem_pio2>:
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	ec57 6b10 	vmov	r6, r7, d0
 8003b00:	4bc3      	ldr	r3, [pc, #780]	; (8003e10 <__ieee754_rem_pio2+0x318>)
 8003b02:	b08d      	sub	sp, #52	; 0x34
 8003b04:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003b08:	4598      	cmp	r8, r3
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	9704      	str	r7, [sp, #16]
 8003b0e:	dc07      	bgt.n	8003b20 <__ieee754_rem_pio2+0x28>
 8003b10:	2200      	movs	r2, #0
 8003b12:	2300      	movs	r3, #0
 8003b14:	ed84 0b00 	vstr	d0, [r4]
 8003b18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	e027      	b.n	8003b70 <__ieee754_rem_pio2+0x78>
 8003b20:	4bbc      	ldr	r3, [pc, #752]	; (8003e14 <__ieee754_rem_pio2+0x31c>)
 8003b22:	4598      	cmp	r8, r3
 8003b24:	dc75      	bgt.n	8003c12 <__ieee754_rem_pio2+0x11a>
 8003b26:	9b04      	ldr	r3, [sp, #16]
 8003b28:	4dbb      	ldr	r5, [pc, #748]	; (8003e18 <__ieee754_rem_pio2+0x320>)
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	ee10 0a10 	vmov	r0, s0
 8003b30:	a3a9      	add	r3, pc, #676	; (adr r3, 8003dd8 <__ieee754_rem_pio2+0x2e0>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	4639      	mov	r1, r7
 8003b38:	dd36      	ble.n	8003ba8 <__ieee754_rem_pio2+0xb0>
 8003b3a:	f7fc fb49 	bl	80001d0 <__aeabi_dsub>
 8003b3e:	45a8      	cmp	r8, r5
 8003b40:	4606      	mov	r6, r0
 8003b42:	460f      	mov	r7, r1
 8003b44:	d018      	beq.n	8003b78 <__ieee754_rem_pio2+0x80>
 8003b46:	a3a6      	add	r3, pc, #664	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e8>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f7fc fb40 	bl	80001d0 <__aeabi_dsub>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	e9c4 2300 	strd	r2, r3, [r4]
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	f7fc fb38 	bl	80001d0 <__aeabi_dsub>
 8003b60:	a39f      	add	r3, pc, #636	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e8>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f7fc fb33 	bl	80001d0 <__aeabi_dsub>
 8003b6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b6e:	2501      	movs	r5, #1
 8003b70:	4628      	mov	r0, r5
 8003b72:	b00d      	add	sp, #52	; 0x34
 8003b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b78:	a39b      	add	r3, pc, #620	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2f0>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f7fc fb27 	bl	80001d0 <__aeabi_dsub>
 8003b82:	a39b      	add	r3, pc, #620	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f8>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	4606      	mov	r6, r0
 8003b8a:	460f      	mov	r7, r1
 8003b8c:	f7fc fb20 	bl	80001d0 <__aeabi_dsub>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	e9c4 2300 	strd	r2, r3, [r4]
 8003b98:	4630      	mov	r0, r6
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	f7fc fb18 	bl	80001d0 <__aeabi_dsub>
 8003ba0:	a393      	add	r3, pc, #588	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f8>)
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	e7de      	b.n	8003b66 <__ieee754_rem_pio2+0x6e>
 8003ba8:	f7fc fb14 	bl	80001d4 <__adddf3>
 8003bac:	45a8      	cmp	r8, r5
 8003bae:	4606      	mov	r6, r0
 8003bb0:	460f      	mov	r7, r1
 8003bb2:	d016      	beq.n	8003be2 <__ieee754_rem_pio2+0xea>
 8003bb4:	a38a      	add	r3, pc, #552	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e8>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fb0b 	bl	80001d4 <__adddf3>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	e9c4 2300 	strd	r2, r3, [r4]
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	4639      	mov	r1, r7
 8003bca:	f7fc fb01 	bl	80001d0 <__aeabi_dsub>
 8003bce:	a384      	add	r3, pc, #528	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e8>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fafe 	bl	80001d4 <__adddf3>
 8003bd8:	f04f 35ff 	mov.w	r5, #4294967295
 8003bdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003be0:	e7c6      	b.n	8003b70 <__ieee754_rem_pio2+0x78>
 8003be2:	a381      	add	r3, pc, #516	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2f0>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc faf4 	bl	80001d4 <__adddf3>
 8003bec:	a380      	add	r3, pc, #512	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f8>)
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	460f      	mov	r7, r1
 8003bf6:	f7fc faed 	bl	80001d4 <__adddf3>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	e9c4 2300 	strd	r2, r3, [r4]
 8003c02:	4630      	mov	r0, r6
 8003c04:	4639      	mov	r1, r7
 8003c06:	f7fc fae3 	bl	80001d0 <__aeabi_dsub>
 8003c0a:	a379      	add	r3, pc, #484	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f8>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	e7e0      	b.n	8003bd4 <__ieee754_rem_pio2+0xdc>
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <__ieee754_rem_pio2+0x324>)
 8003c14:	4598      	cmp	r8, r3
 8003c16:	f300 80d0 	bgt.w	8003dba <__ieee754_rem_pio2+0x2c2>
 8003c1a:	f000 fe23 	bl	8004864 <fabs>
 8003c1e:	ec57 6b10 	vmov	r6, r7, d0
 8003c22:	ee10 0a10 	vmov	r0, s0
 8003c26:	a374      	add	r3, pc, #464	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x300>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	4639      	mov	r1, r7
 8003c2e:	f7fc fc87 	bl	8000540 <__aeabi_dmul>
 8003c32:	2200      	movs	r2, #0
 8003c34:	4b7a      	ldr	r3, [pc, #488]	; (8003e20 <__ieee754_rem_pio2+0x328>)
 8003c36:	f7fc facd 	bl	80001d4 <__adddf3>
 8003c3a:	f7fc ff1b 	bl	8000a74 <__aeabi_d2iz>
 8003c3e:	4605      	mov	r5, r0
 8003c40:	f7fc fc14 	bl	800046c <__aeabi_i2d>
 8003c44:	a364      	add	r3, pc, #400	; (adr r3, 8003dd8 <__ieee754_rem_pio2+0x2e0>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c4e:	f7fc fc77 	bl	8000540 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4630      	mov	r0, r6
 8003c58:	4639      	mov	r1, r7
 8003c5a:	f7fc fab9 	bl	80001d0 <__aeabi_dsub>
 8003c5e:	a360      	add	r3, pc, #384	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e8>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	4682      	mov	sl, r0
 8003c66:	468b      	mov	fp, r1
 8003c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c6c:	f7fc fc68 	bl	8000540 <__aeabi_dmul>
 8003c70:	2d1f      	cmp	r5, #31
 8003c72:	4606      	mov	r6, r0
 8003c74:	460f      	mov	r7, r1
 8003c76:	dc0c      	bgt.n	8003c92 <__ieee754_rem_pio2+0x19a>
 8003c78:	1e6a      	subs	r2, r5, #1
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <__ieee754_rem_pio2+0x32c>)
 8003c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c80:	4543      	cmp	r3, r8
 8003c82:	d006      	beq.n	8003c92 <__ieee754_rem_pio2+0x19a>
 8003c84:	4632      	mov	r2, r6
 8003c86:	463b      	mov	r3, r7
 8003c88:	4650      	mov	r0, sl
 8003c8a:	4659      	mov	r1, fp
 8003c8c:	f7fc faa0 	bl	80001d0 <__aeabi_dsub>
 8003c90:	e00e      	b.n	8003cb0 <__ieee754_rem_pio2+0x1b8>
 8003c92:	4632      	mov	r2, r6
 8003c94:	463b      	mov	r3, r7
 8003c96:	4650      	mov	r0, sl
 8003c98:	4659      	mov	r1, fp
 8003c9a:	f7fc fa99 	bl	80001d0 <__aeabi_dsub>
 8003c9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003ca2:	9305      	str	r3, [sp, #20]
 8003ca4:	9a05      	ldr	r2, [sp, #20]
 8003ca6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	dc02      	bgt.n	8003cb6 <__ieee754_rem_pio2+0x1be>
 8003cb0:	e9c4 0100 	strd	r0, r1, [r4]
 8003cb4:	e039      	b.n	8003d2a <__ieee754_rem_pio2+0x232>
 8003cb6:	a34c      	add	r3, pc, #304	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2f0>)
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc0:	f7fc fc3e 	bl	8000540 <__aeabi_dmul>
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460f      	mov	r7, r1
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4650      	mov	r0, sl
 8003cce:	4659      	mov	r1, fp
 8003cd0:	f7fc fa7e 	bl	80001d0 <__aeabi_dsub>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4680      	mov	r8, r0
 8003cda:	4689      	mov	r9, r1
 8003cdc:	4650      	mov	r0, sl
 8003cde:	4659      	mov	r1, fp
 8003ce0:	f7fc fa76 	bl	80001d0 <__aeabi_dsub>
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	f7fc fa72 	bl	80001d0 <__aeabi_dsub>
 8003cec:	a340      	add	r3, pc, #256	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f8>)
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	460f      	mov	r7, r1
 8003cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cfa:	f7fc fc21 	bl	8000540 <__aeabi_dmul>
 8003cfe:	4632      	mov	r2, r6
 8003d00:	463b      	mov	r3, r7
 8003d02:	f7fc fa65 	bl	80001d0 <__aeabi_dsub>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	460f      	mov	r7, r1
 8003d0e:	4640      	mov	r0, r8
 8003d10:	4649      	mov	r1, r9
 8003d12:	f7fc fa5d 	bl	80001d0 <__aeabi_dsub>
 8003d16:	9a05      	ldr	r2, [sp, #20]
 8003d18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b31      	cmp	r3, #49	; 0x31
 8003d20:	dc20      	bgt.n	8003d64 <__ieee754_rem_pio2+0x26c>
 8003d22:	e9c4 0100 	strd	r0, r1, [r4]
 8003d26:	46c2      	mov	sl, r8
 8003d28:	46cb      	mov	fp, r9
 8003d2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d2e:	4650      	mov	r0, sl
 8003d30:	4642      	mov	r2, r8
 8003d32:	464b      	mov	r3, r9
 8003d34:	4659      	mov	r1, fp
 8003d36:	f7fc fa4b 	bl	80001d0 <__aeabi_dsub>
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	f7fc fa47 	bl	80001d0 <__aeabi_dsub>
 8003d42:	9b04      	ldr	r3, [sp, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d4a:	f6bf af11 	bge.w	8003b70 <__ieee754_rem_pio2+0x78>
 8003d4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d52:	6063      	str	r3, [r4, #4]
 8003d54:	f8c4 8000 	str.w	r8, [r4]
 8003d58:	60a0      	str	r0, [r4, #8]
 8003d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d5e:	60e3      	str	r3, [r4, #12]
 8003d60:	426d      	negs	r5, r5
 8003d62:	e705      	b.n	8003b70 <__ieee754_rem_pio2+0x78>
 8003d64:	a326      	add	r3, pc, #152	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x308>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d6e:	f7fc fbe7 	bl	8000540 <__aeabi_dmul>
 8003d72:	4606      	mov	r6, r0
 8003d74:	460f      	mov	r7, r1
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	f7fc fa27 	bl	80001d0 <__aeabi_dsub>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4682      	mov	sl, r0
 8003d88:	468b      	mov	fp, r1
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc fa1f 	bl	80001d0 <__aeabi_dsub>
 8003d92:	4632      	mov	r2, r6
 8003d94:	463b      	mov	r3, r7
 8003d96:	f7fc fa1b 	bl	80001d0 <__aeabi_dsub>
 8003d9a:	a31b      	add	r3, pc, #108	; (adr r3, 8003e08 <__ieee754_rem_pio2+0x310>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	4606      	mov	r6, r0
 8003da2:	460f      	mov	r7, r1
 8003da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003da8:	f7fc fbca 	bl	8000540 <__aeabi_dmul>
 8003dac:	4632      	mov	r2, r6
 8003dae:	463b      	mov	r3, r7
 8003db0:	f7fc fa0e 	bl	80001d0 <__aeabi_dsub>
 8003db4:	4606      	mov	r6, r0
 8003db6:	460f      	mov	r7, r1
 8003db8:	e764      	b.n	8003c84 <__ieee754_rem_pio2+0x18c>
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <__ieee754_rem_pio2+0x330>)
 8003dbc:	4598      	cmp	r8, r3
 8003dbe:	dd35      	ble.n	8003e2c <__ieee754_rem_pio2+0x334>
 8003dc0:	ee10 2a10 	vmov	r2, s0
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	4639      	mov	r1, r7
 8003dca:	f7fc fa01 	bl	80001d0 <__aeabi_dsub>
 8003dce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dd2:	e9c4 0100 	strd	r0, r1, [r4]
 8003dd6:	e6a1      	b.n	8003b1c <__ieee754_rem_pio2+0x24>
 8003dd8:	54400000 	.word	0x54400000
 8003ddc:	3ff921fb 	.word	0x3ff921fb
 8003de0:	1a626331 	.word	0x1a626331
 8003de4:	3dd0b461 	.word	0x3dd0b461
 8003de8:	1a600000 	.word	0x1a600000
 8003dec:	3dd0b461 	.word	0x3dd0b461
 8003df0:	2e037073 	.word	0x2e037073
 8003df4:	3ba3198a 	.word	0x3ba3198a
 8003df8:	6dc9c883 	.word	0x6dc9c883
 8003dfc:	3fe45f30 	.word	0x3fe45f30
 8003e00:	2e000000 	.word	0x2e000000
 8003e04:	3ba3198a 	.word	0x3ba3198a
 8003e08:	252049c1 	.word	0x252049c1
 8003e0c:	397b839a 	.word	0x397b839a
 8003e10:	3fe921fb 	.word	0x3fe921fb
 8003e14:	4002d97b 	.word	0x4002d97b
 8003e18:	3ff921fb 	.word	0x3ff921fb
 8003e1c:	413921fb 	.word	0x413921fb
 8003e20:	3fe00000 	.word	0x3fe00000
 8003e24:	08004b08 	.word	0x08004b08
 8003e28:	7fefffff 	.word	0x7fefffff
 8003e2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003e30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003e34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003e38:	4630      	mov	r0, r6
 8003e3a:	460f      	mov	r7, r1
 8003e3c:	f7fc fe1a 	bl	8000a74 <__aeabi_d2iz>
 8003e40:	f7fc fb14 	bl	800046c <__aeabi_i2d>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e50:	f7fc f9be 	bl	80001d0 <__aeabi_dsub>
 8003e54:	2200      	movs	r2, #0
 8003e56:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <__ieee754_rem_pio2+0x3dc>)
 8003e58:	f7fc fb72 	bl	8000540 <__aeabi_dmul>
 8003e5c:	460f      	mov	r7, r1
 8003e5e:	4606      	mov	r6, r0
 8003e60:	f7fc fe08 	bl	8000a74 <__aeabi_d2iz>
 8003e64:	f7fc fb02 	bl	800046c <__aeabi_i2d>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	4639      	mov	r1, r7
 8003e70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e74:	f7fc f9ac 	bl	80001d0 <__aeabi_dsub>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <__ieee754_rem_pio2+0x3dc>)
 8003e7c:	f7fc fb60 	bl	8000540 <__aeabi_dmul>
 8003e80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003e88:	f04f 0803 	mov.w	r8, #3
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	2700      	movs	r7, #0
 8003e90:	4632      	mov	r2, r6
 8003e92:	463b      	mov	r3, r7
 8003e94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003e98:	f108 3aff 	add.w	sl, r8, #4294967295
 8003e9c:	f7fc fdb8 	bl	8000a10 <__aeabi_dcmpeq>
 8003ea0:	b9b0      	cbnz	r0, 8003ed0 <__ieee754_rem_pio2+0x3d8>
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <__ieee754_rem_pio2+0x3e0>)
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4643      	mov	r3, r8
 8003eae:	4621      	mov	r1, r4
 8003eb0:	a806      	add	r0, sp, #24
 8003eb2:	f000 f8dd 	bl	8004070 <__kernel_rem_pio2>
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	4605      	mov	r5, r0
 8003ebc:	f6bf ae58 	bge.w	8003b70 <__ieee754_rem_pio2+0x78>
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ec6:	6063      	str	r3, [r4, #4]
 8003ec8:	68e3      	ldr	r3, [r4, #12]
 8003eca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ece:	e746      	b.n	8003d5e <__ieee754_rem_pio2+0x266>
 8003ed0:	46d0      	mov	r8, sl
 8003ed2:	e7dd      	b.n	8003e90 <__ieee754_rem_pio2+0x398>
 8003ed4:	41700000 	.word	0x41700000
 8003ed8:	08004b88 	.word	0x08004b88
 8003edc:	00000000 	.word	0x00000000

08003ee0 <__kernel_cos>:
 8003ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	ec59 8b10 	vmov	r8, r9, d0
 8003ee8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003eec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003ef0:	ed2d 8b02 	vpush	{d8}
 8003ef4:	eeb0 8a41 	vmov.f32	s16, s2
 8003ef8:	eef0 8a61 	vmov.f32	s17, s3
 8003efc:	da07      	bge.n	8003f0e <__kernel_cos+0x2e>
 8003efe:	ee10 0a10 	vmov	r0, s0
 8003f02:	4649      	mov	r1, r9
 8003f04:	f7fc fdb6 	bl	8000a74 <__aeabi_d2iz>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	f000 8089 	beq.w	8004020 <__kernel_cos+0x140>
 8003f0e:	4642      	mov	r2, r8
 8003f10:	464b      	mov	r3, r9
 8003f12:	4640      	mov	r0, r8
 8003f14:	4649      	mov	r1, r9
 8003f16:	f7fc fb13 	bl	8000540 <__aeabi_dmul>
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4b4e      	ldr	r3, [pc, #312]	; (8004058 <__kernel_cos+0x178>)
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460d      	mov	r5, r1
 8003f22:	f7fc fb0d 	bl	8000540 <__aeabi_dmul>
 8003f26:	a340      	add	r3, pc, #256	; (adr r3, 8004028 <__kernel_cos+0x148>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	4682      	mov	sl, r0
 8003f2e:	468b      	mov	fp, r1
 8003f30:	4620      	mov	r0, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	f7fc fb04 	bl	8000540 <__aeabi_dmul>
 8003f38:	a33d      	add	r3, pc, #244	; (adr r3, 8004030 <__kernel_cos+0x150>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f7fc f949 	bl	80001d4 <__adddf3>
 8003f42:	4622      	mov	r2, r4
 8003f44:	462b      	mov	r3, r5
 8003f46:	f7fc fafb 	bl	8000540 <__aeabi_dmul>
 8003f4a:	a33b      	add	r3, pc, #236	; (adr r3, 8004038 <__kernel_cos+0x158>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f7fc f93e 	bl	80001d0 <__aeabi_dsub>
 8003f54:	4622      	mov	r2, r4
 8003f56:	462b      	mov	r3, r5
 8003f58:	f7fc faf2 	bl	8000540 <__aeabi_dmul>
 8003f5c:	a338      	add	r3, pc, #224	; (adr r3, 8004040 <__kernel_cos+0x160>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f7fc f937 	bl	80001d4 <__adddf3>
 8003f66:	4622      	mov	r2, r4
 8003f68:	462b      	mov	r3, r5
 8003f6a:	f7fc fae9 	bl	8000540 <__aeabi_dmul>
 8003f6e:	a336      	add	r3, pc, #216	; (adr r3, 8004048 <__kernel_cos+0x168>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc f92c 	bl	80001d0 <__aeabi_dsub>
 8003f78:	4622      	mov	r2, r4
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	f7fc fae0 	bl	8000540 <__aeabi_dmul>
 8003f80:	a333      	add	r3, pc, #204	; (adr r3, 8004050 <__kernel_cos+0x170>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc f925 	bl	80001d4 <__adddf3>
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	f7fc fad7 	bl	8000540 <__aeabi_dmul>
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f7fc fad3 	bl	8000540 <__aeabi_dmul>
 8003f9a:	ec53 2b18 	vmov	r2, r3, d8
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	f7fc facb 	bl	8000540 <__aeabi_dmul>
 8003faa:	460b      	mov	r3, r1
 8003fac:	4602      	mov	r2, r0
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7fc f90d 	bl	80001d0 <__aeabi_dsub>
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <__kernel_cos+0x17c>)
 8003fb8:	429e      	cmp	r6, r3
 8003fba:	4680      	mov	r8, r0
 8003fbc:	4689      	mov	r9, r1
 8003fbe:	dc11      	bgt.n	8003fe4 <__kernel_cos+0x104>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_dsub>
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4924      	ldr	r1, [pc, #144]	; (8004060 <__kernel_cos+0x180>)
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f7fc f8fc 	bl	80001d0 <__aeabi_dsub>
 8003fd8:	ecbd 8b02 	vpop	{d8}
 8003fdc:	ec41 0b10 	vmov	d0, r0, r1
 8003fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <__kernel_cos+0x184>)
 8003fe6:	491e      	ldr	r1, [pc, #120]	; (8004060 <__kernel_cos+0x180>)
 8003fe8:	429e      	cmp	r6, r3
 8003fea:	bfcc      	ite	gt
 8003fec:	4d1e      	ldrgt	r5, [pc, #120]	; (8004068 <__kernel_cos+0x188>)
 8003fee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003ff2:	2400      	movs	r4, #0
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fc f8e9 	bl	80001d0 <__aeabi_dsub>
 8003ffe:	4622      	mov	r2, r4
 8004000:	4606      	mov	r6, r0
 8004002:	460f      	mov	r7, r1
 8004004:	462b      	mov	r3, r5
 8004006:	4650      	mov	r0, sl
 8004008:	4659      	mov	r1, fp
 800400a:	f7fc f8e1 	bl	80001d0 <__aeabi_dsub>
 800400e:	4642      	mov	r2, r8
 8004010:	464b      	mov	r3, r9
 8004012:	f7fc f8dd 	bl	80001d0 <__aeabi_dsub>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	e7d9      	b.n	8003fd4 <__kernel_cos+0xf4>
 8004020:	2000      	movs	r0, #0
 8004022:	490f      	ldr	r1, [pc, #60]	; (8004060 <__kernel_cos+0x180>)
 8004024:	e7d8      	b.n	8003fd8 <__kernel_cos+0xf8>
 8004026:	bf00      	nop
 8004028:	be8838d4 	.word	0xbe8838d4
 800402c:	bda8fae9 	.word	0xbda8fae9
 8004030:	bdb4b1c4 	.word	0xbdb4b1c4
 8004034:	3e21ee9e 	.word	0x3e21ee9e
 8004038:	809c52ad 	.word	0x809c52ad
 800403c:	3e927e4f 	.word	0x3e927e4f
 8004040:	19cb1590 	.word	0x19cb1590
 8004044:	3efa01a0 	.word	0x3efa01a0
 8004048:	16c15177 	.word	0x16c15177
 800404c:	3f56c16c 	.word	0x3f56c16c
 8004050:	5555554c 	.word	0x5555554c
 8004054:	3fa55555 	.word	0x3fa55555
 8004058:	3fe00000 	.word	0x3fe00000
 800405c:	3fd33332 	.word	0x3fd33332
 8004060:	3ff00000 	.word	0x3ff00000
 8004064:	3fe90000 	.word	0x3fe90000
 8004068:	3fd20000 	.word	0x3fd20000
 800406c:	00000000 	.word	0x00000000

08004070 <__kernel_rem_pio2>:
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	ed2d 8b02 	vpush	{d8}
 8004078:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800407c:	1ed4      	subs	r4, r2, #3
 800407e:	9308      	str	r3, [sp, #32]
 8004080:	9101      	str	r1, [sp, #4]
 8004082:	4bc5      	ldr	r3, [pc, #788]	; (8004398 <__kernel_rem_pio2+0x328>)
 8004084:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004086:	9009      	str	r0, [sp, #36]	; 0x24
 8004088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800408c:	9304      	str	r3, [sp, #16]
 800408e:	9b08      	ldr	r3, [sp, #32]
 8004090:	3b01      	subs	r3, #1
 8004092:	9307      	str	r3, [sp, #28]
 8004094:	2318      	movs	r3, #24
 8004096:	fb94 f4f3 	sdiv	r4, r4, r3
 800409a:	f06f 0317 	mvn.w	r3, #23
 800409e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80040a2:	fb04 3303 	mla	r3, r4, r3, r3
 80040a6:	eb03 0a02 	add.w	sl, r3, r2
 80040aa:	9b04      	ldr	r3, [sp, #16]
 80040ac:	9a07      	ldr	r2, [sp, #28]
 80040ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004388 <__kernel_rem_pio2+0x318>
 80040b2:	eb03 0802 	add.w	r8, r3, r2
 80040b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80040b8:	1aa7      	subs	r7, r4, r2
 80040ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80040be:	ae22      	add	r6, sp, #136	; 0x88
 80040c0:	2500      	movs	r5, #0
 80040c2:	4545      	cmp	r5, r8
 80040c4:	dd13      	ble.n	80040ee <__kernel_rem_pio2+0x7e>
 80040c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004388 <__kernel_rem_pio2+0x318>
 80040ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80040ce:	2600      	movs	r6, #0
 80040d0:	9b04      	ldr	r3, [sp, #16]
 80040d2:	429e      	cmp	r6, r3
 80040d4:	dc32      	bgt.n	800413c <__kernel_rem_pio2+0xcc>
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	9302      	str	r3, [sp, #8]
 80040da:	9b08      	ldr	r3, [sp, #32]
 80040dc:	199d      	adds	r5, r3, r6
 80040de:	ab22      	add	r3, sp, #136	; 0x88
 80040e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80040e4:	9306      	str	r3, [sp, #24]
 80040e6:	ec59 8b18 	vmov	r8, r9, d8
 80040ea:	2700      	movs	r7, #0
 80040ec:	e01f      	b.n	800412e <__kernel_rem_pio2+0xbe>
 80040ee:	42ef      	cmn	r7, r5
 80040f0:	d407      	bmi.n	8004102 <__kernel_rem_pio2+0x92>
 80040f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80040f6:	f7fc f9b9 	bl	800046c <__aeabi_i2d>
 80040fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80040fe:	3501      	adds	r5, #1
 8004100:	e7df      	b.n	80040c2 <__kernel_rem_pio2+0x52>
 8004102:	ec51 0b18 	vmov	r0, r1, d8
 8004106:	e7f8      	b.n	80040fa <__kernel_rem_pio2+0x8a>
 8004108:	9906      	ldr	r1, [sp, #24]
 800410a:	9d02      	ldr	r5, [sp, #8]
 800410c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004110:	9106      	str	r1, [sp, #24]
 8004112:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004116:	9502      	str	r5, [sp, #8]
 8004118:	f7fc fa12 	bl	8000540 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4640      	mov	r0, r8
 8004122:	4649      	mov	r1, r9
 8004124:	f7fc f856 	bl	80001d4 <__adddf3>
 8004128:	3701      	adds	r7, #1
 800412a:	4680      	mov	r8, r0
 800412c:	4689      	mov	r9, r1
 800412e:	9b07      	ldr	r3, [sp, #28]
 8004130:	429f      	cmp	r7, r3
 8004132:	dde9      	ble.n	8004108 <__kernel_rem_pio2+0x98>
 8004134:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004138:	3601      	adds	r6, #1
 800413a:	e7c9      	b.n	80040d0 <__kernel_rem_pio2+0x60>
 800413c:	9b04      	ldr	r3, [sp, #16]
 800413e:	aa0e      	add	r2, sp, #56	; 0x38
 8004140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004144:	930c      	str	r3, [sp, #48]	; 0x30
 8004146:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004148:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800414c:	9c04      	ldr	r4, [sp, #16]
 800414e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004150:	ab9a      	add	r3, sp, #616	; 0x268
 8004152:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004156:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800415a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800415e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004162:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004166:	ab9a      	add	r3, sp, #616	; 0x268
 8004168:	445b      	add	r3, fp
 800416a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800416e:	2500      	movs	r5, #0
 8004170:	1b63      	subs	r3, r4, r5
 8004172:	2b00      	cmp	r3, #0
 8004174:	dc78      	bgt.n	8004268 <__kernel_rem_pio2+0x1f8>
 8004176:	4650      	mov	r0, sl
 8004178:	ec49 8b10 	vmov	d0, r8, r9
 800417c:	f000 fc00 	bl	8004980 <scalbn>
 8004180:	ec57 6b10 	vmov	r6, r7, d0
 8004184:	2200      	movs	r2, #0
 8004186:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800418a:	ee10 0a10 	vmov	r0, s0
 800418e:	4639      	mov	r1, r7
 8004190:	f7fc f9d6 	bl	8000540 <__aeabi_dmul>
 8004194:	ec41 0b10 	vmov	d0, r0, r1
 8004198:	f000 fb6e 	bl	8004878 <floor>
 800419c:	2200      	movs	r2, #0
 800419e:	ec51 0b10 	vmov	r0, r1, d0
 80041a2:	4b7e      	ldr	r3, [pc, #504]	; (800439c <__kernel_rem_pio2+0x32c>)
 80041a4:	f7fc f9cc 	bl	8000540 <__aeabi_dmul>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4630      	mov	r0, r6
 80041ae:	4639      	mov	r1, r7
 80041b0:	f7fc f80e 	bl	80001d0 <__aeabi_dsub>
 80041b4:	460f      	mov	r7, r1
 80041b6:	4606      	mov	r6, r0
 80041b8:	f7fc fc5c 	bl	8000a74 <__aeabi_d2iz>
 80041bc:	9006      	str	r0, [sp, #24]
 80041be:	f7fc f955 	bl	800046c <__aeabi_i2d>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4630      	mov	r0, r6
 80041c8:	4639      	mov	r1, r7
 80041ca:	f7fc f801 	bl	80001d0 <__aeabi_dsub>
 80041ce:	f1ba 0f00 	cmp.w	sl, #0
 80041d2:	4606      	mov	r6, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	dd6c      	ble.n	80042b2 <__kernel_rem_pio2+0x242>
 80041d8:	1e62      	subs	r2, r4, #1
 80041da:	ab0e      	add	r3, sp, #56	; 0x38
 80041dc:	f1ca 0118 	rsb	r1, sl, #24
 80041e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80041e4:	9d06      	ldr	r5, [sp, #24]
 80041e6:	fa40 f301 	asr.w	r3, r0, r1
 80041ea:	441d      	add	r5, r3
 80041ec:	408b      	lsls	r3, r1
 80041ee:	1ac0      	subs	r0, r0, r3
 80041f0:	ab0e      	add	r3, sp, #56	; 0x38
 80041f2:	9506      	str	r5, [sp, #24]
 80041f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80041f8:	f1ca 0317 	rsb	r3, sl, #23
 80041fc:	fa40 f303 	asr.w	r3, r0, r3
 8004200:	9302      	str	r3, [sp, #8]
 8004202:	9b02      	ldr	r3, [sp, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	dd62      	ble.n	80042ce <__kernel_rem_pio2+0x25e>
 8004208:	9b06      	ldr	r3, [sp, #24]
 800420a:	2200      	movs	r2, #0
 800420c:	3301      	adds	r3, #1
 800420e:	9306      	str	r3, [sp, #24]
 8004210:	4615      	mov	r5, r2
 8004212:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004216:	4294      	cmp	r4, r2
 8004218:	f300 8095 	bgt.w	8004346 <__kernel_rem_pio2+0x2d6>
 800421c:	f1ba 0f00 	cmp.w	sl, #0
 8004220:	dd07      	ble.n	8004232 <__kernel_rem_pio2+0x1c2>
 8004222:	f1ba 0f01 	cmp.w	sl, #1
 8004226:	f000 80a2 	beq.w	800436e <__kernel_rem_pio2+0x2fe>
 800422a:	f1ba 0f02 	cmp.w	sl, #2
 800422e:	f000 80c1 	beq.w	80043b4 <__kernel_rem_pio2+0x344>
 8004232:	9b02      	ldr	r3, [sp, #8]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d14a      	bne.n	80042ce <__kernel_rem_pio2+0x25e>
 8004238:	4632      	mov	r2, r6
 800423a:	463b      	mov	r3, r7
 800423c:	2000      	movs	r0, #0
 800423e:	4958      	ldr	r1, [pc, #352]	; (80043a0 <__kernel_rem_pio2+0x330>)
 8004240:	f7fb ffc6 	bl	80001d0 <__aeabi_dsub>
 8004244:	4606      	mov	r6, r0
 8004246:	460f      	mov	r7, r1
 8004248:	2d00      	cmp	r5, #0
 800424a:	d040      	beq.n	80042ce <__kernel_rem_pio2+0x25e>
 800424c:	4650      	mov	r0, sl
 800424e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004390 <__kernel_rem_pio2+0x320>
 8004252:	f000 fb95 	bl	8004980 <scalbn>
 8004256:	4630      	mov	r0, r6
 8004258:	4639      	mov	r1, r7
 800425a:	ec53 2b10 	vmov	r2, r3, d0
 800425e:	f7fb ffb7 	bl	80001d0 <__aeabi_dsub>
 8004262:	4606      	mov	r6, r0
 8004264:	460f      	mov	r7, r1
 8004266:	e032      	b.n	80042ce <__kernel_rem_pio2+0x25e>
 8004268:	2200      	movs	r2, #0
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <__kernel_rem_pio2+0x334>)
 800426c:	4640      	mov	r0, r8
 800426e:	4649      	mov	r1, r9
 8004270:	f7fc f966 	bl	8000540 <__aeabi_dmul>
 8004274:	f7fc fbfe 	bl	8000a74 <__aeabi_d2iz>
 8004278:	f7fc f8f8 	bl	800046c <__aeabi_i2d>
 800427c:	2200      	movs	r2, #0
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <__kernel_rem_pio2+0x338>)
 8004280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004284:	f7fc f95c 	bl	8000540 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4640      	mov	r0, r8
 800428e:	4649      	mov	r1, r9
 8004290:	f7fb ff9e 	bl	80001d0 <__aeabi_dsub>
 8004294:	f7fc fbee 	bl	8000a74 <__aeabi_d2iz>
 8004298:	ab0e      	add	r3, sp, #56	; 0x38
 800429a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800429e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80042a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042a6:	f7fb ff95 	bl	80001d4 <__adddf3>
 80042aa:	3501      	adds	r5, #1
 80042ac:	4680      	mov	r8, r0
 80042ae:	4689      	mov	r9, r1
 80042b0:	e75e      	b.n	8004170 <__kernel_rem_pio2+0x100>
 80042b2:	d105      	bne.n	80042c0 <__kernel_rem_pio2+0x250>
 80042b4:	1e63      	subs	r3, r4, #1
 80042b6:	aa0e      	add	r2, sp, #56	; 0x38
 80042b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042bc:	15c3      	asrs	r3, r0, #23
 80042be:	e79f      	b.n	8004200 <__kernel_rem_pio2+0x190>
 80042c0:	2200      	movs	r2, #0
 80042c2:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <__kernel_rem_pio2+0x33c>)
 80042c4:	f7fc fbc2 	bl	8000a4c <__aeabi_dcmpge>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d139      	bne.n	8004340 <__kernel_rem_pio2+0x2d0>
 80042cc:	9002      	str	r0, [sp, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2300      	movs	r3, #0
 80042d2:	4630      	mov	r0, r6
 80042d4:	4639      	mov	r1, r7
 80042d6:	f7fc fb9b 	bl	8000a10 <__aeabi_dcmpeq>
 80042da:	2800      	cmp	r0, #0
 80042dc:	f000 80c7 	beq.w	800446e <__kernel_rem_pio2+0x3fe>
 80042e0:	1e65      	subs	r5, r4, #1
 80042e2:	462b      	mov	r3, r5
 80042e4:	2200      	movs	r2, #0
 80042e6:	9904      	ldr	r1, [sp, #16]
 80042e8:	428b      	cmp	r3, r1
 80042ea:	da6a      	bge.n	80043c2 <__kernel_rem_pio2+0x352>
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	f000 8088 	beq.w	8004402 <__kernel_rem_pio2+0x392>
 80042f2:	ab0e      	add	r3, sp, #56	; 0x38
 80042f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80042f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80b4 	beq.w	800446a <__kernel_rem_pio2+0x3fa>
 8004302:	4650      	mov	r0, sl
 8004304:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004390 <__kernel_rem_pio2+0x320>
 8004308:	f000 fb3a 	bl	8004980 <scalbn>
 800430c:	00ec      	lsls	r4, r5, #3
 800430e:	ab72      	add	r3, sp, #456	; 0x1c8
 8004310:	191e      	adds	r6, r3, r4
 8004312:	ec59 8b10 	vmov	r8, r9, d0
 8004316:	f106 0a08 	add.w	sl, r6, #8
 800431a:	462f      	mov	r7, r5
 800431c:	2f00      	cmp	r7, #0
 800431e:	f280 80df 	bge.w	80044e0 <__kernel_rem_pio2+0x470>
 8004322:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004388 <__kernel_rem_pio2+0x318>
 8004326:	f04f 0a00 	mov.w	sl, #0
 800432a:	eba5 030a 	sub.w	r3, r5, sl
 800432e:	2b00      	cmp	r3, #0
 8004330:	f2c0 810a 	blt.w	8004548 <__kernel_rem_pio2+0x4d8>
 8004334:	f8df b078 	ldr.w	fp, [pc, #120]	; 80043b0 <__kernel_rem_pio2+0x340>
 8004338:	ec59 8b18 	vmov	r8, r9, d8
 800433c:	2700      	movs	r7, #0
 800433e:	e0f5      	b.n	800452c <__kernel_rem_pio2+0x4bc>
 8004340:	2302      	movs	r3, #2
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	e760      	b.n	8004208 <__kernel_rem_pio2+0x198>
 8004346:	ab0e      	add	r3, sp, #56	; 0x38
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	b94d      	cbnz	r5, 8004362 <__kernel_rem_pio2+0x2f2>
 800434e:	b12b      	cbz	r3, 800435c <__kernel_rem_pio2+0x2ec>
 8004350:	a80e      	add	r0, sp, #56	; 0x38
 8004352:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004356:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800435a:	2301      	movs	r3, #1
 800435c:	3201      	adds	r2, #1
 800435e:	461d      	mov	r5, r3
 8004360:	e759      	b.n	8004216 <__kernel_rem_pio2+0x1a6>
 8004362:	a80e      	add	r0, sp, #56	; 0x38
 8004364:	1acb      	subs	r3, r1, r3
 8004366:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800436a:	462b      	mov	r3, r5
 800436c:	e7f6      	b.n	800435c <__kernel_rem_pio2+0x2ec>
 800436e:	1e62      	subs	r2, r4, #1
 8004370:	ab0e      	add	r3, sp, #56	; 0x38
 8004372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004376:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800437a:	a90e      	add	r1, sp, #56	; 0x38
 800437c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004380:	e757      	b.n	8004232 <__kernel_rem_pio2+0x1c2>
 8004382:	bf00      	nop
 8004384:	f3af 8000 	nop.w
	...
 8004394:	3ff00000 	.word	0x3ff00000
 8004398:	08004cd0 	.word	0x08004cd0
 800439c:	40200000 	.word	0x40200000
 80043a0:	3ff00000 	.word	0x3ff00000
 80043a4:	3e700000 	.word	0x3e700000
 80043a8:	41700000 	.word	0x41700000
 80043ac:	3fe00000 	.word	0x3fe00000
 80043b0:	08004c90 	.word	0x08004c90
 80043b4:	1e62      	subs	r2, r4, #1
 80043b6:	ab0e      	add	r3, sp, #56	; 0x38
 80043b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80043c0:	e7db      	b.n	800437a <__kernel_rem_pio2+0x30a>
 80043c2:	a90e      	add	r1, sp, #56	; 0x38
 80043c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	430a      	orrs	r2, r1
 80043cc:	e78b      	b.n	80042e6 <__kernel_rem_pio2+0x276>
 80043ce:	3301      	adds	r3, #1
 80043d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80043d4:	2900      	cmp	r1, #0
 80043d6:	d0fa      	beq.n	80043ce <__kernel_rem_pio2+0x35e>
 80043d8:	9a08      	ldr	r2, [sp, #32]
 80043da:	4422      	add	r2, r4
 80043dc:	00d2      	lsls	r2, r2, #3
 80043de:	a922      	add	r1, sp, #136	; 0x88
 80043e0:	18e3      	adds	r3, r4, r3
 80043e2:	9206      	str	r2, [sp, #24]
 80043e4:	440a      	add	r2, r1
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	f10b 0108 	add.w	r1, fp, #8
 80043ec:	f102 0308 	add.w	r3, r2, #8
 80043f0:	1c66      	adds	r6, r4, #1
 80043f2:	910a      	str	r1, [sp, #40]	; 0x28
 80043f4:	2500      	movs	r5, #0
 80043f6:	930d      	str	r3, [sp, #52]	; 0x34
 80043f8:	9b02      	ldr	r3, [sp, #8]
 80043fa:	42b3      	cmp	r3, r6
 80043fc:	da04      	bge.n	8004408 <__kernel_rem_pio2+0x398>
 80043fe:	461c      	mov	r4, r3
 8004400:	e6a6      	b.n	8004150 <__kernel_rem_pio2+0xe0>
 8004402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004404:	2301      	movs	r3, #1
 8004406:	e7e3      	b.n	80043d0 <__kernel_rem_pio2+0x360>
 8004408:	9b06      	ldr	r3, [sp, #24]
 800440a:	18ef      	adds	r7, r5, r3
 800440c:	ab22      	add	r3, sp, #136	; 0x88
 800440e:	441f      	add	r7, r3
 8004410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004412:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004416:	f7fc f829 	bl	800046c <__aeabi_i2d>
 800441a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441c:	461c      	mov	r4, r3
 800441e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004420:	e9c7 0100 	strd	r0, r1, [r7]
 8004424:	eb03 0b05 	add.w	fp, r3, r5
 8004428:	2700      	movs	r7, #0
 800442a:	f04f 0800 	mov.w	r8, #0
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	9b07      	ldr	r3, [sp, #28]
 8004434:	429f      	cmp	r7, r3
 8004436:	dd08      	ble.n	800444a <__kernel_rem_pio2+0x3da>
 8004438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443a:	aa72      	add	r2, sp, #456	; 0x1c8
 800443c:	18eb      	adds	r3, r5, r3
 800443e:	4413      	add	r3, r2
 8004440:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8004444:	3601      	adds	r6, #1
 8004446:	3508      	adds	r5, #8
 8004448:	e7d6      	b.n	80043f8 <__kernel_rem_pio2+0x388>
 800444a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800444e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004452:	f7fc f875 	bl	8000540 <__aeabi_dmul>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4640      	mov	r0, r8
 800445c:	4649      	mov	r1, r9
 800445e:	f7fb feb9 	bl	80001d4 <__adddf3>
 8004462:	3701      	adds	r7, #1
 8004464:	4680      	mov	r8, r0
 8004466:	4689      	mov	r9, r1
 8004468:	e7e3      	b.n	8004432 <__kernel_rem_pio2+0x3c2>
 800446a:	3d01      	subs	r5, #1
 800446c:	e741      	b.n	80042f2 <__kernel_rem_pio2+0x282>
 800446e:	f1ca 0000 	rsb	r0, sl, #0
 8004472:	ec47 6b10 	vmov	d0, r6, r7
 8004476:	f000 fa83 	bl	8004980 <scalbn>
 800447a:	ec57 6b10 	vmov	r6, r7, d0
 800447e:	2200      	movs	r2, #0
 8004480:	4b99      	ldr	r3, [pc, #612]	; (80046e8 <__kernel_rem_pio2+0x678>)
 8004482:	ee10 0a10 	vmov	r0, s0
 8004486:	4639      	mov	r1, r7
 8004488:	f7fc fae0 	bl	8000a4c <__aeabi_dcmpge>
 800448c:	b1f8      	cbz	r0, 80044ce <__kernel_rem_pio2+0x45e>
 800448e:	2200      	movs	r2, #0
 8004490:	4b96      	ldr	r3, [pc, #600]	; (80046ec <__kernel_rem_pio2+0x67c>)
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fc f853 	bl	8000540 <__aeabi_dmul>
 800449a:	f7fc faeb 	bl	8000a74 <__aeabi_d2iz>
 800449e:	4680      	mov	r8, r0
 80044a0:	f7fb ffe4 	bl	800046c <__aeabi_i2d>
 80044a4:	2200      	movs	r2, #0
 80044a6:	4b90      	ldr	r3, [pc, #576]	; (80046e8 <__kernel_rem_pio2+0x678>)
 80044a8:	f7fc f84a 	bl	8000540 <__aeabi_dmul>
 80044ac:	460b      	mov	r3, r1
 80044ae:	4602      	mov	r2, r0
 80044b0:	4639      	mov	r1, r7
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7fb fe8c 	bl	80001d0 <__aeabi_dsub>
 80044b8:	f7fc fadc 	bl	8000a74 <__aeabi_d2iz>
 80044bc:	1c65      	adds	r5, r4, #1
 80044be:	ab0e      	add	r3, sp, #56	; 0x38
 80044c0:	f10a 0a18 	add.w	sl, sl, #24
 80044c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80044cc:	e719      	b.n	8004302 <__kernel_rem_pio2+0x292>
 80044ce:	4630      	mov	r0, r6
 80044d0:	4639      	mov	r1, r7
 80044d2:	f7fc facf 	bl	8000a74 <__aeabi_d2iz>
 80044d6:	ab0e      	add	r3, sp, #56	; 0x38
 80044d8:	4625      	mov	r5, r4
 80044da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044de:	e710      	b.n	8004302 <__kernel_rem_pio2+0x292>
 80044e0:	ab0e      	add	r3, sp, #56	; 0x38
 80044e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80044e6:	f7fb ffc1 	bl	800046c <__aeabi_i2d>
 80044ea:	4642      	mov	r2, r8
 80044ec:	464b      	mov	r3, r9
 80044ee:	f7fc f827 	bl	8000540 <__aeabi_dmul>
 80044f2:	2200      	movs	r2, #0
 80044f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80044f8:	4b7c      	ldr	r3, [pc, #496]	; (80046ec <__kernel_rem_pio2+0x67c>)
 80044fa:	4640      	mov	r0, r8
 80044fc:	4649      	mov	r1, r9
 80044fe:	f7fc f81f 	bl	8000540 <__aeabi_dmul>
 8004502:	3f01      	subs	r7, #1
 8004504:	4680      	mov	r8, r0
 8004506:	4689      	mov	r9, r1
 8004508:	e708      	b.n	800431c <__kernel_rem_pio2+0x2ac>
 800450a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8004516:	f7fc f813 	bl	8000540 <__aeabi_dmul>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fb fe57 	bl	80001d4 <__adddf3>
 8004526:	3701      	adds	r7, #1
 8004528:	4680      	mov	r8, r0
 800452a:	4689      	mov	r9, r1
 800452c:	9b04      	ldr	r3, [sp, #16]
 800452e:	429f      	cmp	r7, r3
 8004530:	dc01      	bgt.n	8004536 <__kernel_rem_pio2+0x4c6>
 8004532:	45ba      	cmp	sl, r7
 8004534:	dae9      	bge.n	800450a <__kernel_rem_pio2+0x49a>
 8004536:	ab4a      	add	r3, sp, #296	; 0x128
 8004538:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800453c:	e9c3 8900 	strd	r8, r9, [r3]
 8004540:	f10a 0a01 	add.w	sl, sl, #1
 8004544:	3e08      	subs	r6, #8
 8004546:	e6f0      	b.n	800432a <__kernel_rem_pio2+0x2ba>
 8004548:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800454a:	2b03      	cmp	r3, #3
 800454c:	d85b      	bhi.n	8004606 <__kernel_rem_pio2+0x596>
 800454e:	e8df f003 	tbb	[pc, r3]
 8004552:	264a      	.short	0x264a
 8004554:	0226      	.short	0x0226
 8004556:	ab9a      	add	r3, sp, #616	; 0x268
 8004558:	441c      	add	r4, r3
 800455a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800455e:	46a2      	mov	sl, r4
 8004560:	46ab      	mov	fp, r5
 8004562:	f1bb 0f00 	cmp.w	fp, #0
 8004566:	dc6c      	bgt.n	8004642 <__kernel_rem_pio2+0x5d2>
 8004568:	46a2      	mov	sl, r4
 800456a:	46ab      	mov	fp, r5
 800456c:	f1bb 0f01 	cmp.w	fp, #1
 8004570:	f300 8086 	bgt.w	8004680 <__kernel_rem_pio2+0x610>
 8004574:	2000      	movs	r0, #0
 8004576:	2100      	movs	r1, #0
 8004578:	2d01      	cmp	r5, #1
 800457a:	f300 80a0 	bgt.w	80046be <__kernel_rem_pio2+0x64e>
 800457e:	9b02      	ldr	r3, [sp, #8]
 8004580:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004584:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 809e 	bne.w	80046ca <__kernel_rem_pio2+0x65a>
 800458e:	9b01      	ldr	r3, [sp, #4]
 8004590:	e9c3 7800 	strd	r7, r8, [r3]
 8004594:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004598:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800459c:	e033      	b.n	8004606 <__kernel_rem_pio2+0x596>
 800459e:	3408      	adds	r4, #8
 80045a0:	ab4a      	add	r3, sp, #296	; 0x128
 80045a2:	441c      	add	r4, r3
 80045a4:	462e      	mov	r6, r5
 80045a6:	2000      	movs	r0, #0
 80045a8:	2100      	movs	r1, #0
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	da3a      	bge.n	8004624 <__kernel_rem_pio2+0x5b4>
 80045ae:	9b02      	ldr	r3, [sp, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d03d      	beq.n	8004630 <__kernel_rem_pio2+0x5c0>
 80045b4:	4602      	mov	r2, r0
 80045b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045ba:	9c01      	ldr	r4, [sp, #4]
 80045bc:	e9c4 2300 	strd	r2, r3, [r4]
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80045c8:	f7fb fe02 	bl	80001d0 <__aeabi_dsub>
 80045cc:	ae4c      	add	r6, sp, #304	; 0x130
 80045ce:	2401      	movs	r4, #1
 80045d0:	42a5      	cmp	r5, r4
 80045d2:	da30      	bge.n	8004636 <__kernel_rem_pio2+0x5c6>
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	b113      	cbz	r3, 80045de <__kernel_rem_pio2+0x56e>
 80045d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045dc:	4619      	mov	r1, r3
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80045e4:	e00f      	b.n	8004606 <__kernel_rem_pio2+0x596>
 80045e6:	ab9a      	add	r3, sp, #616	; 0x268
 80045e8:	441c      	add	r4, r3
 80045ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80045ee:	2000      	movs	r0, #0
 80045f0:	2100      	movs	r1, #0
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	da10      	bge.n	8004618 <__kernel_rem_pio2+0x5a8>
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	b113      	cbz	r3, 8004600 <__kernel_rem_pio2+0x590>
 80045fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045fe:	4619      	mov	r1, r3
 8004600:	9b01      	ldr	r3, [sp, #4]
 8004602:	e9c3 0100 	strd	r0, r1, [r3]
 8004606:	9b06      	ldr	r3, [sp, #24]
 8004608:	f003 0007 	and.w	r0, r3, #7
 800460c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004610:	ecbd 8b02 	vpop	{d8}
 8004614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004618:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800461c:	f7fb fdda 	bl	80001d4 <__adddf3>
 8004620:	3d01      	subs	r5, #1
 8004622:	e7e6      	b.n	80045f2 <__kernel_rem_pio2+0x582>
 8004624:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004628:	f7fb fdd4 	bl	80001d4 <__adddf3>
 800462c:	3e01      	subs	r6, #1
 800462e:	e7bc      	b.n	80045aa <__kernel_rem_pio2+0x53a>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	e7c1      	b.n	80045ba <__kernel_rem_pio2+0x54a>
 8004636:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800463a:	f7fb fdcb 	bl	80001d4 <__adddf3>
 800463e:	3401      	adds	r4, #1
 8004640:	e7c6      	b.n	80045d0 <__kernel_rem_pio2+0x560>
 8004642:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8004646:	ed3a 7b02 	vldmdb	sl!, {d7}
 800464a:	4640      	mov	r0, r8
 800464c:	ec53 2b17 	vmov	r2, r3, d7
 8004650:	4649      	mov	r1, r9
 8004652:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004656:	f7fb fdbd 	bl	80001d4 <__adddf3>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4606      	mov	r6, r0
 8004660:	460f      	mov	r7, r1
 8004662:	4640      	mov	r0, r8
 8004664:	4649      	mov	r1, r9
 8004666:	f7fb fdb3 	bl	80001d0 <__aeabi_dsub>
 800466a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800466e:	f7fb fdb1 	bl	80001d4 <__adddf3>
 8004672:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004676:	e9ca 0100 	strd	r0, r1, [sl]
 800467a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800467e:	e770      	b.n	8004562 <__kernel_rem_pio2+0x4f2>
 8004680:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8004684:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004688:	4630      	mov	r0, r6
 800468a:	ec53 2b17 	vmov	r2, r3, d7
 800468e:	4639      	mov	r1, r7
 8004690:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004694:	f7fb fd9e 	bl	80001d4 <__adddf3>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	4630      	mov	r0, r6
 80046a2:	4639      	mov	r1, r7
 80046a4:	f7fb fd94 	bl	80001d0 <__aeabi_dsub>
 80046a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ac:	f7fb fd92 	bl	80001d4 <__adddf3>
 80046b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046b4:	e9ca 0100 	strd	r0, r1, [sl]
 80046b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80046bc:	e756      	b.n	800456c <__kernel_rem_pio2+0x4fc>
 80046be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046c2:	f7fb fd87 	bl	80001d4 <__adddf3>
 80046c6:	3d01      	subs	r5, #1
 80046c8:	e756      	b.n	8004578 <__kernel_rem_pio2+0x508>
 80046ca:	9b01      	ldr	r3, [sp, #4]
 80046cc:	9a01      	ldr	r2, [sp, #4]
 80046ce:	601f      	str	r7, [r3, #0]
 80046d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80046d4:	605c      	str	r4, [r3, #4]
 80046d6:	609d      	str	r5, [r3, #8]
 80046d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046dc:	60d3      	str	r3, [r2, #12]
 80046de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046e2:	6110      	str	r0, [r2, #16]
 80046e4:	6153      	str	r3, [r2, #20]
 80046e6:	e78e      	b.n	8004606 <__kernel_rem_pio2+0x596>
 80046e8:	41700000 	.word	0x41700000
 80046ec:	3e700000 	.word	0x3e700000

080046f0 <__kernel_sin>:
 80046f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f4:	ec55 4b10 	vmov	r4, r5, d0
 80046f8:	b085      	sub	sp, #20
 80046fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80046fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004702:	ed8d 1b00 	vstr	d1, [sp]
 8004706:	9002      	str	r0, [sp, #8]
 8004708:	da06      	bge.n	8004718 <__kernel_sin+0x28>
 800470a:	ee10 0a10 	vmov	r0, s0
 800470e:	4629      	mov	r1, r5
 8004710:	f7fc f9b0 	bl	8000a74 <__aeabi_d2iz>
 8004714:	2800      	cmp	r0, #0
 8004716:	d051      	beq.n	80047bc <__kernel_sin+0xcc>
 8004718:	4622      	mov	r2, r4
 800471a:	462b      	mov	r3, r5
 800471c:	4620      	mov	r0, r4
 800471e:	4629      	mov	r1, r5
 8004720:	f7fb ff0e 	bl	8000540 <__aeabi_dmul>
 8004724:	4682      	mov	sl, r0
 8004726:	468b      	mov	fp, r1
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4620      	mov	r0, r4
 800472e:	4629      	mov	r1, r5
 8004730:	f7fb ff06 	bl	8000540 <__aeabi_dmul>
 8004734:	a341      	add	r3, pc, #260	; (adr r3, 800483c <__kernel_sin+0x14c>)
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	4680      	mov	r8, r0
 800473c:	4689      	mov	r9, r1
 800473e:	4650      	mov	r0, sl
 8004740:	4659      	mov	r1, fp
 8004742:	f7fb fefd 	bl	8000540 <__aeabi_dmul>
 8004746:	a33f      	add	r3, pc, #252	; (adr r3, 8004844 <__kernel_sin+0x154>)
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f7fb fd40 	bl	80001d0 <__aeabi_dsub>
 8004750:	4652      	mov	r2, sl
 8004752:	465b      	mov	r3, fp
 8004754:	f7fb fef4 	bl	8000540 <__aeabi_dmul>
 8004758:	a33c      	add	r3, pc, #240	; (adr r3, 800484c <__kernel_sin+0x15c>)
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f7fb fd39 	bl	80001d4 <__adddf3>
 8004762:	4652      	mov	r2, sl
 8004764:	465b      	mov	r3, fp
 8004766:	f7fb feeb 	bl	8000540 <__aeabi_dmul>
 800476a:	a33a      	add	r3, pc, #232	; (adr r3, 8004854 <__kernel_sin+0x164>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f7fb fd2e 	bl	80001d0 <__aeabi_dsub>
 8004774:	4652      	mov	r2, sl
 8004776:	465b      	mov	r3, fp
 8004778:	f7fb fee2 	bl	8000540 <__aeabi_dmul>
 800477c:	a337      	add	r3, pc, #220	; (adr r3, 800485c <__kernel_sin+0x16c>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb fd27 	bl	80001d4 <__adddf3>
 8004786:	9b02      	ldr	r3, [sp, #8]
 8004788:	4606      	mov	r6, r0
 800478a:	460f      	mov	r7, r1
 800478c:	b9db      	cbnz	r3, 80047c6 <__kernel_sin+0xd6>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4650      	mov	r0, sl
 8004794:	4659      	mov	r1, fp
 8004796:	f7fb fed3 	bl	8000540 <__aeabi_dmul>
 800479a:	a325      	add	r3, pc, #148	; (adr r3, 8004830 <__kernel_sin+0x140>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fb fd16 	bl	80001d0 <__aeabi_dsub>
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	f7fb feca 	bl	8000540 <__aeabi_dmul>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	f7fb fd0e 	bl	80001d4 <__adddf3>
 80047b8:	4604      	mov	r4, r0
 80047ba:	460d      	mov	r5, r1
 80047bc:	ec45 4b10 	vmov	d0, r4, r5
 80047c0:	b005      	add	sp, #20
 80047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c6:	2200      	movs	r2, #0
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <__kernel_sin+0x148>)
 80047ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047ce:	f7fb feb7 	bl	8000540 <__aeabi_dmul>
 80047d2:	4632      	mov	r2, r6
 80047d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d8:	463b      	mov	r3, r7
 80047da:	4640      	mov	r0, r8
 80047dc:	4649      	mov	r1, r9
 80047de:	f7fb feaf 	bl	8000540 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ea:	f7fb fcf1 	bl	80001d0 <__aeabi_dsub>
 80047ee:	4652      	mov	r2, sl
 80047f0:	465b      	mov	r3, fp
 80047f2:	f7fb fea5 	bl	8000540 <__aeabi_dmul>
 80047f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047fa:	f7fb fce9 	bl	80001d0 <__aeabi_dsub>
 80047fe:	a30c      	add	r3, pc, #48	; (adr r3, 8004830 <__kernel_sin+0x140>)
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	4606      	mov	r6, r0
 8004806:	460f      	mov	r7, r1
 8004808:	4640      	mov	r0, r8
 800480a:	4649      	mov	r1, r9
 800480c:	f7fb fe98 	bl	8000540 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4630      	mov	r0, r6
 8004816:	4639      	mov	r1, r7
 8004818:	f7fb fcdc 	bl	80001d4 <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4620      	mov	r0, r4
 8004822:	4629      	mov	r1, r5
 8004824:	f7fb fcd4 	bl	80001d0 <__aeabi_dsub>
 8004828:	e7c6      	b.n	80047b8 <__kernel_sin+0xc8>
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w
 8004830:	55555549 	.word	0x55555549
 8004834:	3fc55555 	.word	0x3fc55555
 8004838:	3fe00000 	.word	0x3fe00000
 800483c:	5acfd57c 	.word	0x5acfd57c
 8004840:	3de5d93a 	.word	0x3de5d93a
 8004844:	8a2b9ceb 	.word	0x8a2b9ceb
 8004848:	3e5ae5e6 	.word	0x3e5ae5e6
 800484c:	57b1fe7d 	.word	0x57b1fe7d
 8004850:	3ec71de3 	.word	0x3ec71de3
 8004854:	19c161d5 	.word	0x19c161d5
 8004858:	3f2a01a0 	.word	0x3f2a01a0
 800485c:	1110f8a6 	.word	0x1110f8a6
 8004860:	3f811111 	.word	0x3f811111

08004864 <fabs>:
 8004864:	ec51 0b10 	vmov	r0, r1, d0
 8004868:	ee10 2a10 	vmov	r2, s0
 800486c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004870:	ec43 2b10 	vmov	d0, r2, r3
 8004874:	4770      	bx	lr
	...

08004878 <floor>:
 8004878:	ec51 0b10 	vmov	r0, r1, d0
 800487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004880:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004884:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004888:	2e13      	cmp	r6, #19
 800488a:	460c      	mov	r4, r1
 800488c:	ee10 5a10 	vmov	r5, s0
 8004890:	4680      	mov	r8, r0
 8004892:	dc34      	bgt.n	80048fe <floor+0x86>
 8004894:	2e00      	cmp	r6, #0
 8004896:	da16      	bge.n	80048c6 <floor+0x4e>
 8004898:	a335      	add	r3, pc, #212	; (adr r3, 8004970 <floor+0xf8>)
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f7fb fc99 	bl	80001d4 <__adddf3>
 80048a2:	2200      	movs	r2, #0
 80048a4:	2300      	movs	r3, #0
 80048a6:	f7fc f8db 	bl	8000a60 <__aeabi_dcmpgt>
 80048aa:	b148      	cbz	r0, 80048c0 <floor+0x48>
 80048ac:	2c00      	cmp	r4, #0
 80048ae:	da59      	bge.n	8004964 <floor+0xec>
 80048b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80048b4:	4a30      	ldr	r2, [pc, #192]	; (8004978 <floor+0x100>)
 80048b6:	432b      	orrs	r3, r5
 80048b8:	2500      	movs	r5, #0
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	bf18      	it	ne
 80048be:	4614      	movne	r4, r2
 80048c0:	4621      	mov	r1, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	e025      	b.n	8004912 <floor+0x9a>
 80048c6:	4f2d      	ldr	r7, [pc, #180]	; (800497c <floor+0x104>)
 80048c8:	4137      	asrs	r7, r6
 80048ca:	ea01 0307 	and.w	r3, r1, r7
 80048ce:	4303      	orrs	r3, r0
 80048d0:	d01f      	beq.n	8004912 <floor+0x9a>
 80048d2:	a327      	add	r3, pc, #156	; (adr r3, 8004970 <floor+0xf8>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f7fb fc7c 	bl	80001d4 <__adddf3>
 80048dc:	2200      	movs	r2, #0
 80048de:	2300      	movs	r3, #0
 80048e0:	f7fc f8be 	bl	8000a60 <__aeabi_dcmpgt>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0eb      	beq.n	80048c0 <floor+0x48>
 80048e8:	2c00      	cmp	r4, #0
 80048ea:	bfbe      	ittt	lt
 80048ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80048f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80048f4:	19a4      	addlt	r4, r4, r6
 80048f6:	ea24 0407 	bic.w	r4, r4, r7
 80048fa:	2500      	movs	r5, #0
 80048fc:	e7e0      	b.n	80048c0 <floor+0x48>
 80048fe:	2e33      	cmp	r6, #51	; 0x33
 8004900:	dd0b      	ble.n	800491a <floor+0xa2>
 8004902:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004906:	d104      	bne.n	8004912 <floor+0x9a>
 8004908:	ee10 2a10 	vmov	r2, s0
 800490c:	460b      	mov	r3, r1
 800490e:	f7fb fc61 	bl	80001d4 <__adddf3>
 8004912:	ec41 0b10 	vmov	d0, r0, r1
 8004916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	fa23 f707 	lsr.w	r7, r3, r7
 8004926:	4207      	tst	r7, r0
 8004928:	d0f3      	beq.n	8004912 <floor+0x9a>
 800492a:	a311      	add	r3, pc, #68	; (adr r3, 8004970 <floor+0xf8>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f7fb fc50 	bl	80001d4 <__adddf3>
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	f7fc f892 	bl	8000a60 <__aeabi_dcmpgt>
 800493c:	2800      	cmp	r0, #0
 800493e:	d0bf      	beq.n	80048c0 <floor+0x48>
 8004940:	2c00      	cmp	r4, #0
 8004942:	da02      	bge.n	800494a <floor+0xd2>
 8004944:	2e14      	cmp	r6, #20
 8004946:	d103      	bne.n	8004950 <floor+0xd8>
 8004948:	3401      	adds	r4, #1
 800494a:	ea25 0507 	bic.w	r5, r5, r7
 800494e:	e7b7      	b.n	80048c0 <floor+0x48>
 8004950:	2301      	movs	r3, #1
 8004952:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004956:	fa03 f606 	lsl.w	r6, r3, r6
 800495a:	4435      	add	r5, r6
 800495c:	4545      	cmp	r5, r8
 800495e:	bf38      	it	cc
 8004960:	18e4      	addcc	r4, r4, r3
 8004962:	e7f2      	b.n	800494a <floor+0xd2>
 8004964:	2500      	movs	r5, #0
 8004966:	462c      	mov	r4, r5
 8004968:	e7aa      	b.n	80048c0 <floor+0x48>
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w
 8004970:	8800759c 	.word	0x8800759c
 8004974:	7e37e43c 	.word	0x7e37e43c
 8004978:	bff00000 	.word	0xbff00000
 800497c:	000fffff 	.word	0x000fffff

08004980 <scalbn>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	ec55 4b10 	vmov	r4, r5, d0
 8004986:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800498a:	4606      	mov	r6, r0
 800498c:	462b      	mov	r3, r5
 800498e:	b9aa      	cbnz	r2, 80049bc <scalbn+0x3c>
 8004990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004994:	4323      	orrs	r3, r4
 8004996:	d03b      	beq.n	8004a10 <scalbn+0x90>
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <scalbn+0xe0>)
 800499a:	4629      	mov	r1, r5
 800499c:	2200      	movs	r2, #0
 800499e:	ee10 0a10 	vmov	r0, s0
 80049a2:	f7fb fdcd 	bl	8000540 <__aeabi_dmul>
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <scalbn+0xe4>)
 80049a8:	429e      	cmp	r6, r3
 80049aa:	4604      	mov	r4, r0
 80049ac:	460d      	mov	r5, r1
 80049ae:	da12      	bge.n	80049d6 <scalbn+0x56>
 80049b0:	a327      	add	r3, pc, #156	; (adr r3, 8004a50 <scalbn+0xd0>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fdc3 	bl	8000540 <__aeabi_dmul>
 80049ba:	e009      	b.n	80049d0 <scalbn+0x50>
 80049bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80049c0:	428a      	cmp	r2, r1
 80049c2:	d10c      	bne.n	80049de <scalbn+0x5e>
 80049c4:	ee10 2a10 	vmov	r2, s0
 80049c8:	4620      	mov	r0, r4
 80049ca:	4629      	mov	r1, r5
 80049cc:	f7fb fc02 	bl	80001d4 <__adddf3>
 80049d0:	4604      	mov	r4, r0
 80049d2:	460d      	mov	r5, r1
 80049d4:	e01c      	b.n	8004a10 <scalbn+0x90>
 80049d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80049da:	460b      	mov	r3, r1
 80049dc:	3a36      	subs	r2, #54	; 0x36
 80049de:	4432      	add	r2, r6
 80049e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80049e4:	428a      	cmp	r2, r1
 80049e6:	dd0b      	ble.n	8004a00 <scalbn+0x80>
 80049e8:	ec45 4b11 	vmov	d1, r4, r5
 80049ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004a58 <scalbn+0xd8>
 80049f0:	f000 f83c 	bl	8004a6c <copysign>
 80049f4:	a318      	add	r3, pc, #96	; (adr r3, 8004a58 <scalbn+0xd8>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	ec51 0b10 	vmov	r0, r1, d0
 80049fe:	e7da      	b.n	80049b6 <scalbn+0x36>
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	dd08      	ble.n	8004a16 <scalbn+0x96>
 8004a04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a10:	ec45 4b10 	vmov	d0, r4, r5
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
 8004a16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a1a:	da0d      	bge.n	8004a38 <scalbn+0xb8>
 8004a1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a20:	429e      	cmp	r6, r3
 8004a22:	ec45 4b11 	vmov	d1, r4, r5
 8004a26:	dce1      	bgt.n	80049ec <scalbn+0x6c>
 8004a28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004a50 <scalbn+0xd0>
 8004a2c:	f000 f81e 	bl	8004a6c <copysign>
 8004a30:	a307      	add	r3, pc, #28	; (adr r3, 8004a50 <scalbn+0xd0>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	e7e0      	b.n	80049fa <scalbn+0x7a>
 8004a38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a3c:	3236      	adds	r2, #54	; 0x36
 8004a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a46:	4620      	mov	r0, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <scalbn+0xe8>)
 8004a4e:	e7b2      	b.n	80049b6 <scalbn+0x36>
 8004a50:	c2f8f359 	.word	0xc2f8f359
 8004a54:	01a56e1f 	.word	0x01a56e1f
 8004a58:	8800759c 	.word	0x8800759c
 8004a5c:	7e37e43c 	.word	0x7e37e43c
 8004a60:	43500000 	.word	0x43500000
 8004a64:	ffff3cb0 	.word	0xffff3cb0
 8004a68:	3c900000 	.word	0x3c900000

08004a6c <copysign>:
 8004a6c:	ec51 0b10 	vmov	r0, r1, d0
 8004a70:	ee11 0a90 	vmov	r0, s3
 8004a74:	ee10 2a10 	vmov	r2, s0
 8004a78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004a7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004a80:	ea41 0300 	orr.w	r3, r1, r0
 8004a84:	ec43 2b10 	vmov	d0, r2, r3
 8004a88:	4770      	bx	lr
	...

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
